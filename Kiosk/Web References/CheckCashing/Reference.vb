'------------------------------------------------------------------------------
' <auto-generated>
'     This code was generated by a tool.
'     Runtime Version:4.0.30319.296
'
'     Changes to this file may cause incorrect behavior and will be lost if
'     the code is regenerated.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On

Imports System
Imports System.ComponentModel
Imports System.Data
Imports System.Diagnostics
Imports System.Web.Services
Imports System.Web.Services.Protocols
Imports System.Xml.Serialization

'
'This source code was auto-generated by Microsoft.VSDesigner, Version 4.0.30319.296.
'
Namespace CheckCashing
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code"),  _
     System.Web.Services.WebServiceBindingAttribute(Name:="CheckCashingSoap", [Namespace]:="http://dev.tranact.com.org/"),  _
     System.Xml.Serialization.XmlIncludeAttribute(GetType(clsListItem)),  _
     System.Xml.Serialization.XmlIncludeAttribute(GetType(clsEntity)),  _
     System.Xml.Serialization.XmlIncludeAttribute(GetType(Object()))>  _
    Partial Public Class CheckCashing
        Inherits System.Web.Services.Protocols.SoapHttpClientProtocol
        
        Private GetErrorDataOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetRegistrationDataFromPanOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetCustomerDataFromPanOperationCompleted As System.Threading.SendOrPostCallback
        
        Private HelloWorldOperationCompleted As System.Threading.SendOrPostCallback
        
        Private FillLanguagesOperationCompleted As System.Threading.SendOrPostCallback
        
        Private ValidateBinOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetCurrentCaseNumOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetTestDataOperationCompleted As System.Threading.SendOrPostCallback
        
        Private InsRegReviewOperationCompleted As System.Threading.SendOrPostCallback
        
        Private UpdateRegTestDataOperationCompleted As System.Threading.SendOrPostCallback
        
        Private QueryCheckCodesOperationCompleted As System.Threading.SendOrPostCallback
        
        Private UpdateRegReviewOperationCompleted As System.Threading.SendOrPostCallback
        
        Private UpdateCheckReviewOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetCheckCaseCodeOperationCompleted As System.Threading.SendOrPostCallback
        
        Private UpdateCaseNumOperationCompleted As System.Threading.SendOrPostCallback
        
        Private DropRegTestDataOperationCompleted As System.Threading.SendOrPostCallback
        
        Private InsChecksOperationCompleted As System.Threading.SendOrPostCallback
        
        Private SaveImageOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetImageOperationCompleted As System.Threading.SendOrPostCallback
        
        Private DerivePasswordBytesOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetWorkstationsOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetWorkstationIDOperationCompleted As System.Threading.SendOrPostCallback
        
        Private PrepareTestDataOperationCompleted As System.Threading.SendOrPostCallback
        
        Private EncryptOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetKioskSettingsOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetLangNameOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetTranslationOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetLangIDOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetCustomerDataFromScanOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetCheckDataOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetCompaniesListOperationCompleted As System.Threading.SendOrPostCallback
        
        Private HasCheckBeenReviewedOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetRandomNumberOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetCompanyDataOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetActiveAccountsOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetHeldEZCashTransOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetAllTransactionsByBlockOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetEZCashAccountsOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetFeeWebCompsOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetEZCashDepositAccountsOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetEZCashInactiveAccountsOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetAllTransactionsDSOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetAllTransactionsByAcctOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetEZCashTransactionsOperationCompleted As System.Threading.SendOrPostCallback
        
        Private IFX_GetTransactionByTranIDOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetEZCashTransactionsByBlockIDOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetIFXTransactionsByBlockIDAndCustIDOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetSystemSettingsOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetEZCashTransactionsByAcctIDOperationCompleted As System.Threading.SendOrPostCallback
        
        Private SaveCustomerCardOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetCustomerDataFromIDOperationCompleted As System.Threading.SendOrPostCallback
        
        Private PostLostCardOperationCompleted As System.Threading.SendOrPostCallback
        
        Private TestOperationCompleted As System.Threading.SendOrPostCallback
        
        Private HashOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetCheckCodeTextOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetRandomNumOperationCompleted As System.Threading.SendOrPostCallback
        
        Private UpdateCustomerOperationCompleted As System.Threading.SendOrPostCallback
        
        Private CreateTransactionNumOperationCompleted As System.Threading.SendOrPostCallback
        
        Private SaveEntityAccountTypeOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetEntityAccountTypeOperationCompleted As System.Threading.SendOrPostCallback
        
        Private SaveCompanyOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetCompanyOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetCompaniesOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetInactiveCompaniesOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetEntitiesOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetCompaniesByEntityOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetInActiveCompaniesByEntityOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetActInfoOperationCompleted As System.Threading.SendOrPostCallback
        
        Private MarkAllCardsHotOperationCompleted As System.Threading.SendOrPostCallback
        
        Private MarkCardHotOperationCompleted As System.Threading.SendOrPostCallback
        
        Private COMMSOperationCompleted As System.Threading.SendOrPostCallback
        
        Private UpdateCustomerAddressOperationCompleted As System.Threading.SendOrPostCallback
        
        Private BuildCustomerMessageOperationCompleted As System.Threading.SendOrPostCallback
        
        Private decryptOperationCompleted As System.Threading.SendOrPostCallback
        
        Private CreatePasswordHashOperationCompleted As System.Threading.SendOrPostCallback
        
        Private RetrieveCompanyNumberForPanOperationCompleted As System.Threading.SendOrPostCallback
        
        Private useDefaultCredentialsSetExplicitly As Boolean
        
        '''<remarks/>
        Public Sub New()
            MyBase.New
            Me.Url = Global.Kiosk.My.MySettings.Default.Kiosk_CheckCashing_CheckCashing
            If (Me.IsLocalFileSystemWebService(Me.Url) = true) Then
                Me.UseDefaultCredentials = true
                Me.useDefaultCredentialsSetExplicitly = false
            Else
                Me.useDefaultCredentialsSetExplicitly = true
            End If
        End Sub
        
        Public Shadows Property Url() As String
            Get
                Return MyBase.Url
            End Get
            Set
                If (((Me.IsLocalFileSystemWebService(MyBase.Url) = true)  _
                            AndAlso (Me.useDefaultCredentialsSetExplicitly = false))  _
                            AndAlso (Me.IsLocalFileSystemWebService(value) = false)) Then
                    MyBase.UseDefaultCredentials = false
                End If
                MyBase.Url = value
            End Set
        End Property
        
        Public Shadows Property UseDefaultCredentials() As Boolean
            Get
                Return MyBase.UseDefaultCredentials
            End Get
            Set
                MyBase.UseDefaultCredentials = value
                Me.useDefaultCredentialsSetExplicitly = true
            End Set
        End Property
        
        '''<remarks/>
        Public Event GetErrorDataCompleted As GetErrorDataCompletedEventHandler
        
        '''<remarks/>
        Public Event GetRegistrationDataFromPanCompleted As GetRegistrationDataFromPanCompletedEventHandler
        
        '''<remarks/>
        Public Event GetCustomerDataFromPanCompleted As GetCustomerDataFromPanCompletedEventHandler
        
        '''<remarks/>
        Public Event HelloWorldCompleted As HelloWorldCompletedEventHandler
        
        '''<remarks/>
        Public Event FillLanguagesCompleted As FillLanguagesCompletedEventHandler
        
        '''<remarks/>
        Public Event ValidateBinCompleted As ValidateBinCompletedEventHandler
        
        '''<remarks/>
        Public Event GetCurrentCaseNumCompleted As GetCurrentCaseNumCompletedEventHandler
        
        '''<remarks/>
        Public Event GetTestDataCompleted As GetTestDataCompletedEventHandler
        
        '''<remarks/>
        Public Event InsRegReviewCompleted As InsRegReviewCompletedEventHandler
        
        '''<remarks/>
        Public Event UpdateRegTestDataCompleted As UpdateRegTestDataCompletedEventHandler
        
        '''<remarks/>
        Public Event QueryCheckCodesCompleted As QueryCheckCodesCompletedEventHandler
        
        '''<remarks/>
        Public Event UpdateRegReviewCompleted As UpdateRegReviewCompletedEventHandler
        
        '''<remarks/>
        Public Event UpdateCheckReviewCompleted As UpdateCheckReviewCompletedEventHandler
        
        '''<remarks/>
        Public Event GetCheckCaseCodeCompleted As GetCheckCaseCodeCompletedEventHandler
        
        '''<remarks/>
        Public Event UpdateCaseNumCompleted As UpdateCaseNumCompletedEventHandler
        
        '''<remarks/>
        Public Event DropRegTestDataCompleted As DropRegTestDataCompletedEventHandler
        
        '''<remarks/>
        Public Event InsChecksCompleted As InsChecksCompletedEventHandler
        
        '''<remarks/>
        Public Event SaveImageCompleted As SaveImageCompletedEventHandler
        
        '''<remarks/>
        Public Event GetImageCompleted As GetImageCompletedEventHandler
        
        '''<remarks/>
        Public Event DerivePasswordBytesCompleted As DerivePasswordBytesCompletedEventHandler
        
        '''<remarks/>
        Public Event GetWorkstationsCompleted As GetWorkstationsCompletedEventHandler
        
        '''<remarks/>
        Public Event GetWorkstationIDCompleted As GetWorkstationIDCompletedEventHandler
        
        '''<remarks/>
        Public Event PrepareTestDataCompleted As PrepareTestDataCompletedEventHandler
        
        '''<remarks/>
        Public Event EncryptCompleted As EncryptCompletedEventHandler
        
        '''<remarks/>
        Public Event GetKioskSettingsCompleted As GetKioskSettingsCompletedEventHandler
        
        '''<remarks/>
        Public Event GetLangNameCompleted As GetLangNameCompletedEventHandler
        
        '''<remarks/>
        Public Event GetTranslationCompleted As GetTranslationCompletedEventHandler
        
        '''<remarks/>
        Public Event GetLangIDCompleted As GetLangIDCompletedEventHandler
        
        '''<remarks/>
        Public Event GetCustomerDataFromScanCompleted As GetCustomerDataFromScanCompletedEventHandler
        
        '''<remarks/>
        Public Event GetCheckDataCompleted As GetCheckDataCompletedEventHandler
        
        '''<remarks/>
        Public Event GetCompaniesListCompleted As GetCompaniesListCompletedEventHandler
        
        '''<remarks/>
        Public Event HasCheckBeenReviewedCompleted As HasCheckBeenReviewedCompletedEventHandler
        
        '''<remarks/>
        Public Event GetRandomNumberCompleted As GetRandomNumberCompletedEventHandler
        
        '''<remarks/>
        Public Event GetCompanyDataCompleted As GetCompanyDataCompletedEventHandler
        
        '''<remarks/>
        Public Event GetActiveAccountsCompleted As GetActiveAccountsCompletedEventHandler
        
        '''<remarks/>
        Public Event GetHeldEZCashTransCompleted As GetHeldEZCashTransCompletedEventHandler
        
        '''<remarks/>
        Public Event GetAllTransactionsByBlockCompleted As GetAllTransactionsByBlockCompletedEventHandler
        
        '''<remarks/>
        Public Event GetEZCashAccountsCompleted As GetEZCashAccountsCompletedEventHandler
        
        '''<remarks/>
        Public Event GetFeeWebCompsCompleted As GetFeeWebCompsCompletedEventHandler
        
        '''<remarks/>
        Public Event GetEZCashDepositAccountsCompleted As GetEZCashDepositAccountsCompletedEventHandler
        
        '''<remarks/>
        Public Event GetEZCashInactiveAccountsCompleted As GetEZCashInactiveAccountsCompletedEventHandler
        
        '''<remarks/>
        Public Event GetAllTransactionsDSCompleted As GetAllTransactionsDSCompletedEventHandler
        
        '''<remarks/>
        Public Event GetAllTransactionsByAcctCompleted As GetAllTransactionsByAcctCompletedEventHandler
        
        '''<remarks/>
        Public Event GetEZCashTransactionsCompleted As GetEZCashTransactionsCompletedEventHandler
        
        '''<remarks/>
        Public Event IFX_GetTransactionByTranIDCompleted As IFX_GetTransactionByTranIDCompletedEventHandler
        
        '''<remarks/>
        Public Event GetEZCashTransactionsByBlockIDCompleted As GetEZCashTransactionsByBlockIDCompletedEventHandler
        
        '''<remarks/>
        Public Event GetIFXTransactionsByBlockIDAndCustIDCompleted As GetIFXTransactionsByBlockIDAndCustIDCompletedEventHandler
        
        '''<remarks/>
        Public Event GetSystemSettingsCompleted As GetSystemSettingsCompletedEventHandler
        
        '''<remarks/>
        Public Event GetEZCashTransactionsByAcctIDCompleted As GetEZCashTransactionsByAcctIDCompletedEventHandler
        
        '''<remarks/>
        Public Event SaveCustomerCardCompleted As SaveCustomerCardCompletedEventHandler
        
        '''<remarks/>
        Public Event GetCustomerDataFromIDCompleted As GetCustomerDataFromIDCompletedEventHandler
        
        '''<remarks/>
        Public Event PostLostCardCompleted As PostLostCardCompletedEventHandler
        
        '''<remarks/>
        Public Event TestCompleted As TestCompletedEventHandler
        
        '''<remarks/>
        Public Event HashCompleted As HashCompletedEventHandler
        
        '''<remarks/>
        Public Event GetCheckCodeTextCompleted As GetCheckCodeTextCompletedEventHandler
        
        '''<remarks/>
        Public Event GetRandomNumCompleted As GetRandomNumCompletedEventHandler
        
        '''<remarks/>
        Public Event UpdateCustomerCompleted As UpdateCustomerCompletedEventHandler
        
        '''<remarks/>
        Public Event CreateTransactionNumCompleted As CreateTransactionNumCompletedEventHandler
        
        '''<remarks/>
        Public Event SaveEntityAccountTypeCompleted As SaveEntityAccountTypeCompletedEventHandler
        
        '''<remarks/>
        Public Event GetEntityAccountTypeCompleted As GetEntityAccountTypeCompletedEventHandler
        
        '''<remarks/>
        Public Event SaveCompanyCompleted As SaveCompanyCompletedEventHandler
        
        '''<remarks/>
        Public Event GetCompanyCompleted As GetCompanyCompletedEventHandler
        
        '''<remarks/>
        Public Event GetCompaniesCompleted As GetCompaniesCompletedEventHandler
        
        '''<remarks/>
        Public Event GetInactiveCompaniesCompleted As GetInactiveCompaniesCompletedEventHandler
        
        '''<remarks/>
        Public Event GetEntitiesCompleted As GetEntitiesCompletedEventHandler
        
        '''<remarks/>
        Public Event GetCompaniesByEntityCompleted As GetCompaniesByEntityCompletedEventHandler
        
        '''<remarks/>
        Public Event GetInActiveCompaniesByEntityCompleted As GetInActiveCompaniesByEntityCompletedEventHandler
        
        '''<remarks/>
        Public Event GetActInfoCompleted As GetActInfoCompletedEventHandler
        
        '''<remarks/>
        Public Event MarkAllCardsHotCompleted As MarkAllCardsHotCompletedEventHandler
        
        '''<remarks/>
        Public Event MarkCardHotCompleted As MarkCardHotCompletedEventHandler
        
        '''<remarks/>
        Public Event COMMSCompleted As COMMSCompletedEventHandler
        
        '''<remarks/>
        Public Event UpdateCustomerAddressCompleted As UpdateCustomerAddressCompletedEventHandler
        
        '''<remarks/>
        Public Event BuildCustomerMessageCompleted As BuildCustomerMessageCompletedEventHandler
        
        '''<remarks/>
        Public Event decryptCompleted As decryptCompletedEventHandler
        
        '''<remarks/>
        Public Event CreatePasswordHashCompleted As CreatePasswordHashCompletedEventHandler
        
        '''<remarks/>
        Public Event RetrieveCompanyNumberForPanCompleted As RetrieveCompanyNumberForPanCompletedEventHandler
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://dev.tranact.com.org/GetErrorData", RequestNamespace:="http://dev.tranact.com.org/", ResponseNamespace:="http://dev.tranact.com.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetErrorData(ByVal iErrCode As Integer) As System.Xml.XmlElement
            Dim results() As Object = Me.Invoke("GetErrorData", New Object() {iErrCode})
            Return CType(results(0),System.Xml.XmlElement)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetErrorDataAsync(ByVal iErrCode As Integer)
            Me.GetErrorDataAsync(iErrCode, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetErrorDataAsync(ByVal iErrCode As Integer, ByVal userState As Object)
            If (Me.GetErrorDataOperationCompleted Is Nothing) Then
                Me.GetErrorDataOperationCompleted = AddressOf Me.OnGetErrorDataOperationCompleted
            End If
            Me.InvokeAsync("GetErrorData", New Object() {iErrCode}, Me.GetErrorDataOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetErrorDataOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetErrorDataCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetErrorDataCompleted(Me, New GetErrorDataCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://dev.tranact.com.org/GetRegistrationDataFromPan", RequestNamespace:="http://dev.tranact.com.org/", ResponseNamespace:="http://dev.tranact.com.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetRegistrationDataFromPan(ByVal PAN As String) As System.Xml.XmlElement
            Dim results() As Object = Me.Invoke("GetRegistrationDataFromPan", New Object() {PAN})
            Return CType(results(0),System.Xml.XmlElement)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetRegistrationDataFromPanAsync(ByVal PAN As String)
            Me.GetRegistrationDataFromPanAsync(PAN, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetRegistrationDataFromPanAsync(ByVal PAN As String, ByVal userState As Object)
            If (Me.GetRegistrationDataFromPanOperationCompleted Is Nothing) Then
                Me.GetRegistrationDataFromPanOperationCompleted = AddressOf Me.OnGetRegistrationDataFromPanOperationCompleted
            End If
            Me.InvokeAsync("GetRegistrationDataFromPan", New Object() {PAN}, Me.GetRegistrationDataFromPanOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetRegistrationDataFromPanOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetRegistrationDataFromPanCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetRegistrationDataFromPanCompleted(Me, New GetRegistrationDataFromPanCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://dev.tranact.com.org/GetCustomerDataFromPan", RequestNamespace:="http://dev.tranact.com.org/", ResponseNamespace:="http://dev.tranact.com.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetCustomerDataFromPan(ByVal PAN As String) As System.Xml.XmlElement
            Dim results() As Object = Me.Invoke("GetCustomerDataFromPan", New Object() {PAN})
            Return CType(results(0),System.Xml.XmlElement)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetCustomerDataFromPanAsync(ByVal PAN As String)
            Me.GetCustomerDataFromPanAsync(PAN, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetCustomerDataFromPanAsync(ByVal PAN As String, ByVal userState As Object)
            If (Me.GetCustomerDataFromPanOperationCompleted Is Nothing) Then
                Me.GetCustomerDataFromPanOperationCompleted = AddressOf Me.OnGetCustomerDataFromPanOperationCompleted
            End If
            Me.InvokeAsync("GetCustomerDataFromPan", New Object() {PAN}, Me.GetCustomerDataFromPanOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetCustomerDataFromPanOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetCustomerDataFromPanCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetCustomerDataFromPanCompleted(Me, New GetCustomerDataFromPanCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://dev.tranact.com.org/HelloWorld", RequestNamespace:="http://dev.tranact.com.org/", ResponseNamespace:="http://dev.tranact.com.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function HelloWorld() As String
            Dim results() As Object = Me.Invoke("HelloWorld", New Object(-1) {})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub HelloWorldAsync()
            Me.HelloWorldAsync(Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub HelloWorldAsync(ByVal userState As Object)
            If (Me.HelloWorldOperationCompleted Is Nothing) Then
                Me.HelloWorldOperationCompleted = AddressOf Me.OnHelloWorldOperationCompleted
            End If
            Me.InvokeAsync("HelloWorld", New Object(-1) {}, Me.HelloWorldOperationCompleted, userState)
        End Sub
        
        Private Sub OnHelloWorldOperationCompleted(ByVal arg As Object)
            If (Not (Me.HelloWorldCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent HelloWorldCompleted(Me, New HelloWorldCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://dev.tranact.com.org/FillLanguages", RequestNamespace:="http://dev.tranact.com.org/", ResponseNamespace:="http://dev.tranact.com.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function FillLanguages() As Object()
            Dim results() As Object = Me.Invoke("FillLanguages", New Object(-1) {})
            Return CType(results(0),Object())
        End Function
        
        '''<remarks/>
        Public Overloads Sub FillLanguagesAsync()
            Me.FillLanguagesAsync(Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub FillLanguagesAsync(ByVal userState As Object)
            If (Me.FillLanguagesOperationCompleted Is Nothing) Then
                Me.FillLanguagesOperationCompleted = AddressOf Me.OnFillLanguagesOperationCompleted
            End If
            Me.InvokeAsync("FillLanguages", New Object(-1) {}, Me.FillLanguagesOperationCompleted, userState)
        End Sub
        
        Private Sub OnFillLanguagesOperationCompleted(ByVal arg As Object)
            If (Not (Me.FillLanguagesCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent FillLanguagesCompleted(Me, New FillLanguagesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://dev.tranact.com.org/ValidateBin", RequestNamespace:="http://dev.tranact.com.org/", ResponseNamespace:="http://dev.tranact.com.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function ValidateBin(ByVal iBin As Integer, ByVal iCustID As Integer) As String
            Dim results() As Object = Me.Invoke("ValidateBin", New Object() {iBin, iCustID})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub ValidateBinAsync(ByVal iBin As Integer, ByVal iCustID As Integer)
            Me.ValidateBinAsync(iBin, iCustID, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub ValidateBinAsync(ByVal iBin As Integer, ByVal iCustID As Integer, ByVal userState As Object)
            If (Me.ValidateBinOperationCompleted Is Nothing) Then
                Me.ValidateBinOperationCompleted = AddressOf Me.OnValidateBinOperationCompleted
            End If
            Me.InvokeAsync("ValidateBin", New Object() {iBin, iCustID}, Me.ValidateBinOperationCompleted, userState)
        End Sub
        
        Private Sub OnValidateBinOperationCompleted(ByVal arg As Object)
            If (Not (Me.ValidateBinCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent ValidateBinCompleted(Me, New ValidateBinCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://dev.tranact.com.org/GetCurrentCaseNum", RequestNamespace:="http://dev.tranact.com.org/", ResponseNamespace:="http://dev.tranact.com.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetCurrentCaseNum() As Object
            Dim results() As Object = Me.Invoke("GetCurrentCaseNum", New Object(-1) {})
            Return CType(results(0),Object)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetCurrentCaseNumAsync()
            Me.GetCurrentCaseNumAsync(Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetCurrentCaseNumAsync(ByVal userState As Object)
            If (Me.GetCurrentCaseNumOperationCompleted Is Nothing) Then
                Me.GetCurrentCaseNumOperationCompleted = AddressOf Me.OnGetCurrentCaseNumOperationCompleted
            End If
            Me.InvokeAsync("GetCurrentCaseNum", New Object(-1) {}, Me.GetCurrentCaseNumOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetCurrentCaseNumOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetCurrentCaseNumCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetCurrentCaseNumCompleted(Me, New GetCurrentCaseNumCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://dev.tranact.com.org/GetTestData", RequestNamespace:="http://dev.tranact.com.org/", ResponseNamespace:="http://dev.tranact.com.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetTestData(ByVal strKey As String, ByVal CaseNum As Integer) As Object
            Dim results() As Object = Me.Invoke("GetTestData", New Object() {strKey, CaseNum})
            Return CType(results(0),Object)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetTestDataAsync(ByVal strKey As String, ByVal CaseNum As Integer)
            Me.GetTestDataAsync(strKey, CaseNum, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetTestDataAsync(ByVal strKey As String, ByVal CaseNum As Integer, ByVal userState As Object)
            If (Me.GetTestDataOperationCompleted Is Nothing) Then
                Me.GetTestDataOperationCompleted = AddressOf Me.OnGetTestDataOperationCompleted
            End If
            Me.InvokeAsync("GetTestData", New Object() {strKey, CaseNum}, Me.GetTestDataOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetTestDataOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetTestDataCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetTestDataCompleted(Me, New GetTestDataCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://dev.tranact.com.org/InsRegReview", RequestNamespace:="http://dev.tranact.com.org/", ResponseNamespace:="http://dev.tranact.com.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function InsRegReview( _
                    ByVal Scan_ID As Integer,  _
                    ByVal GroupID As Integer,  _
                    ByVal CustomerID As Integer,  _
                    ByVal First_name As String,  _
                    ByVal Last_Name As String,  _
                    ByVal DOB As Date,  _
                    ByVal Middle_Name As String,  _
                    ByVal State_Code As String,  _
                    ByVal ID_Type As Integer,  _
                    ByVal Issue_date As Date,  _
                    ByVal Expiration_date As Date,  _
                    ByVal PHOTO_ID As String,  _
                    ByVal Address1 As String,  _
                    ByVal Address2 As String,  _
                    ByVal City As String,  _
                    ByVal Zip As String,  _
                    ByVal Height As String,  _
                    ByVal Weight As String,  _
                    ByVal Eye_Color As String,  _
                    ByVal Hair_Color As String,  _
                    ByVal User_Name As String,  _
                    ByVal Status As String,  _
                    ByVal CustomerImageVerify As Boolean,  _
                    ByVal PhotoIDMatches As Boolean,  _
                    ByVal Createdate As Date,  _
                    ByVal SSN As String,  _
                    ByVal Sex As String,  _
                    ByVal TransactionType As String,  _
                    ByVal BK_Flag As Integer,  _
                    ByVal PAN As String) As Integer
            Dim results() As Object = Me.Invoke("InsRegReview", New Object() {Scan_ID, GroupID, CustomerID, First_name, Last_Name, DOB, Middle_Name, State_Code, ID_Type, Issue_date, Expiration_date, PHOTO_ID, Address1, Address2, City, Zip, Height, Weight, Eye_Color, Hair_Color, User_Name, Status, CustomerImageVerify, PhotoIDMatches, Createdate, SSN, Sex, TransactionType, BK_Flag, PAN})
            Return CType(results(0),Integer)
        End Function
        
        '''<remarks/>
        Public Overloads Sub InsRegReviewAsync( _
                    ByVal Scan_ID As Integer,  _
                    ByVal GroupID As Integer,  _
                    ByVal CustomerID As Integer,  _
                    ByVal First_name As String,  _
                    ByVal Last_Name As String,  _
                    ByVal DOB As Date,  _
                    ByVal Middle_Name As String,  _
                    ByVal State_Code As String,  _
                    ByVal ID_Type As Integer,  _
                    ByVal Issue_date As Date,  _
                    ByVal Expiration_date As Date,  _
                    ByVal PHOTO_ID As String,  _
                    ByVal Address1 As String,  _
                    ByVal Address2 As String,  _
                    ByVal City As String,  _
                    ByVal Zip As String,  _
                    ByVal Height As String,  _
                    ByVal Weight As String,  _
                    ByVal Eye_Color As String,  _
                    ByVal Hair_Color As String,  _
                    ByVal User_Name As String,  _
                    ByVal Status As String,  _
                    ByVal CustomerImageVerify As Boolean,  _
                    ByVal PhotoIDMatches As Boolean,  _
                    ByVal Createdate As Date,  _
                    ByVal SSN As String,  _
                    ByVal Sex As String,  _
                    ByVal TransactionType As String,  _
                    ByVal BK_Flag As Integer,  _
                    ByVal PAN As String)
            Me.InsRegReviewAsync(Scan_ID, GroupID, CustomerID, First_name, Last_Name, DOB, Middle_Name, State_Code, ID_Type, Issue_date, Expiration_date, PHOTO_ID, Address1, Address2, City, Zip, Height, Weight, Eye_Color, Hair_Color, User_Name, Status, CustomerImageVerify, PhotoIDMatches, Createdate, SSN, Sex, TransactionType, BK_Flag, PAN, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub InsRegReviewAsync( _
                    ByVal Scan_ID As Integer,  _
                    ByVal GroupID As Integer,  _
                    ByVal CustomerID As Integer,  _
                    ByVal First_name As String,  _
                    ByVal Last_Name As String,  _
                    ByVal DOB As Date,  _
                    ByVal Middle_Name As String,  _
                    ByVal State_Code As String,  _
                    ByVal ID_Type As Integer,  _
                    ByVal Issue_date As Date,  _
                    ByVal Expiration_date As Date,  _
                    ByVal PHOTO_ID As String,  _
                    ByVal Address1 As String,  _
                    ByVal Address2 As String,  _
                    ByVal City As String,  _
                    ByVal Zip As String,  _
                    ByVal Height As String,  _
                    ByVal Weight As String,  _
                    ByVal Eye_Color As String,  _
                    ByVal Hair_Color As String,  _
                    ByVal User_Name As String,  _
                    ByVal Status As String,  _
                    ByVal CustomerImageVerify As Boolean,  _
                    ByVal PhotoIDMatches As Boolean,  _
                    ByVal Createdate As Date,  _
                    ByVal SSN As String,  _
                    ByVal Sex As String,  _
                    ByVal TransactionType As String,  _
                    ByVal BK_Flag As Integer,  _
                    ByVal PAN As String,  _
                    ByVal userState As Object)
            If (Me.InsRegReviewOperationCompleted Is Nothing) Then
                Me.InsRegReviewOperationCompleted = AddressOf Me.OnInsRegReviewOperationCompleted
            End If
            Me.InvokeAsync("InsRegReview", New Object() {Scan_ID, GroupID, CustomerID, First_name, Last_Name, DOB, Middle_Name, State_Code, ID_Type, Issue_date, Expiration_date, PHOTO_ID, Address1, Address2, City, Zip, Height, Weight, Eye_Color, Hair_Color, User_Name, Status, CustomerImageVerify, PhotoIDMatches, Createdate, SSN, Sex, TransactionType, BK_Flag, PAN}, Me.InsRegReviewOperationCompleted, userState)
        End Sub
        
        Private Sub OnInsRegReviewOperationCompleted(ByVal arg As Object)
            If (Not (Me.InsRegReviewCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent InsRegReviewCompleted(Me, New InsRegReviewCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://dev.tranact.com.org/UpdateRegTestData", RequestNamespace:="http://dev.tranact.com.org/", ResponseNamespace:="http://dev.tranact.com.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Sub UpdateRegTestData(ByVal Key As String)
            Me.Invoke("UpdateRegTestData", New Object() {Key})
        End Sub
        
        '''<remarks/>
        Public Overloads Sub UpdateRegTestDataAsync(ByVal Key As String)
            Me.UpdateRegTestDataAsync(Key, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub UpdateRegTestDataAsync(ByVal Key As String, ByVal userState As Object)
            If (Me.UpdateRegTestDataOperationCompleted Is Nothing) Then
                Me.UpdateRegTestDataOperationCompleted = AddressOf Me.OnUpdateRegTestDataOperationCompleted
            End If
            Me.InvokeAsync("UpdateRegTestData", New Object() {Key}, Me.UpdateRegTestDataOperationCompleted, userState)
        End Sub
        
        Private Sub OnUpdateRegTestDataOperationCompleted(ByVal arg As Object)
            If (Not (Me.UpdateRegTestDataCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent UpdateRegTestDataCompleted(Me, New System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://dev.tranact.com.org/QueryCheckCodes", RequestNamespace:="http://dev.tranact.com.org/", ResponseNamespace:="http://dev.tranact.com.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function QueryCheckCodes(ByVal Key As String) As String
            Dim results() As Object = Me.Invoke("QueryCheckCodes", New Object() {Key})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub QueryCheckCodesAsync(ByVal Key As String)
            Me.QueryCheckCodesAsync(Key, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub QueryCheckCodesAsync(ByVal Key As String, ByVal userState As Object)
            If (Me.QueryCheckCodesOperationCompleted Is Nothing) Then
                Me.QueryCheckCodesOperationCompleted = AddressOf Me.OnQueryCheckCodesOperationCompleted
            End If
            Me.InvokeAsync("QueryCheckCodes", New Object() {Key}, Me.QueryCheckCodesOperationCompleted, userState)
        End Sub
        
        Private Sub OnQueryCheckCodesOperationCompleted(ByVal arg As Object)
            If (Not (Me.QueryCheckCodesCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent QueryCheckCodesCompleted(Me, New QueryCheckCodesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://dev.tranact.com.org/UpdateRegReview", RequestNamespace:="http://dev.tranact.com.org/", ResponseNamespace:="http://dev.tranact.com.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Sub UpdateRegReview(ByVal iScanID As Integer, ByRef strFirst As String, ByRef strlast As String, ByRef strDOB As String)
            Dim results() As Object = Me.Invoke("UpdateRegReview", New Object() {iScanID, strFirst, strlast, strDOB})
            strFirst = CType(results(0),String)
            strlast = CType(results(1),String)
            strDOB = CType(results(2),String)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub UpdateRegReviewAsync(ByVal iScanID As Integer, ByVal strFirst As String, ByVal strlast As String, ByVal strDOB As String)
            Me.UpdateRegReviewAsync(iScanID, strFirst, strlast, strDOB, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub UpdateRegReviewAsync(ByVal iScanID As Integer, ByVal strFirst As String, ByVal strlast As String, ByVal strDOB As String, ByVal userState As Object)
            If (Me.UpdateRegReviewOperationCompleted Is Nothing) Then
                Me.UpdateRegReviewOperationCompleted = AddressOf Me.OnUpdateRegReviewOperationCompleted
            End If
            Me.InvokeAsync("UpdateRegReview", New Object() {iScanID, strFirst, strlast, strDOB}, Me.UpdateRegReviewOperationCompleted, userState)
        End Sub
        
        Private Sub OnUpdateRegReviewOperationCompleted(ByVal arg As Object)
            If (Not (Me.UpdateRegReviewCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent UpdateRegReviewCompleted(Me, New UpdateRegReviewCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://dev.tranact.com.org/UpdateCheckReview", RequestNamespace:="http://dev.tranact.com.org/", ResponseNamespace:="http://dev.tranact.com.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Sub UpdateCheckReview(ByVal iBlockID As Integer, ByVal mAmt As Double, ByVal dCheckDate As Date)
            Me.Invoke("UpdateCheckReview", New Object() {iBlockID, mAmt, dCheckDate})
        End Sub
        
        '''<remarks/>
        Public Overloads Sub UpdateCheckReviewAsync(ByVal iBlockID As Integer, ByVal mAmt As Double, ByVal dCheckDate As Date)
            Me.UpdateCheckReviewAsync(iBlockID, mAmt, dCheckDate, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub UpdateCheckReviewAsync(ByVal iBlockID As Integer, ByVal mAmt As Double, ByVal dCheckDate As Date, ByVal userState As Object)
            If (Me.UpdateCheckReviewOperationCompleted Is Nothing) Then
                Me.UpdateCheckReviewOperationCompleted = AddressOf Me.OnUpdateCheckReviewOperationCompleted
            End If
            Me.InvokeAsync("UpdateCheckReview", New Object() {iBlockID, mAmt, dCheckDate}, Me.UpdateCheckReviewOperationCompleted, userState)
        End Sub
        
        Private Sub OnUpdateCheckReviewOperationCompleted(ByVal arg As Object)
            If (Not (Me.UpdateCheckReviewCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent UpdateCheckReviewCompleted(Me, New System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://dev.tranact.com.org/GetCheckCaseCode", RequestNamespace:="http://dev.tranact.com.org/", ResponseNamespace:="http://dev.tranact.com.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetCheckCaseCode() As String
            Dim results() As Object = Me.Invoke("GetCheckCaseCode", New Object(-1) {})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetCheckCaseCodeAsync()
            Me.GetCheckCaseCodeAsync(Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetCheckCaseCodeAsync(ByVal userState As Object)
            If (Me.GetCheckCaseCodeOperationCompleted Is Nothing) Then
                Me.GetCheckCaseCodeOperationCompleted = AddressOf Me.OnGetCheckCaseCodeOperationCompleted
            End If
            Me.InvokeAsync("GetCheckCaseCode", New Object(-1) {}, Me.GetCheckCaseCodeOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetCheckCaseCodeOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetCheckCaseCodeCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetCheckCaseCodeCompleted(Me, New GetCheckCaseCodeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://dev.tranact.com.org/UpdateCaseNum", RequestNamespace:="http://dev.tranact.com.org/", ResponseNamespace:="http://dev.tranact.com.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Sub UpdateCaseNum()
            Me.Invoke("UpdateCaseNum", New Object(-1) {})
        End Sub
        
        '''<remarks/>
        Public Overloads Sub UpdateCaseNumAsync()
            Me.UpdateCaseNumAsync(Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub UpdateCaseNumAsync(ByVal userState As Object)
            If (Me.UpdateCaseNumOperationCompleted Is Nothing) Then
                Me.UpdateCaseNumOperationCompleted = AddressOf Me.OnUpdateCaseNumOperationCompleted
            End If
            Me.InvokeAsync("UpdateCaseNum", New Object(-1) {}, Me.UpdateCaseNumOperationCompleted, userState)
        End Sub
        
        Private Sub OnUpdateCaseNumOperationCompleted(ByVal arg As Object)
            If (Not (Me.UpdateCaseNumCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent UpdateCaseNumCompleted(Me, New System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://dev.tranact.com.org/DropRegTestData", RequestNamespace:="http://dev.tranact.com.org/", ResponseNamespace:="http://dev.tranact.com.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Sub DropRegTestData()
            Me.Invoke("DropRegTestData", New Object(-1) {})
        End Sub
        
        '''<remarks/>
        Public Overloads Sub DropRegTestDataAsync()
            Me.DropRegTestDataAsync(Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub DropRegTestDataAsync(ByVal userState As Object)
            If (Me.DropRegTestDataOperationCompleted Is Nothing) Then
                Me.DropRegTestDataOperationCompleted = AddressOf Me.OnDropRegTestDataOperationCompleted
            End If
            Me.InvokeAsync("DropRegTestData", New Object(-1) {}, Me.DropRegTestDataOperationCompleted, userState)
        End Sub
        
        Private Sub OnDropRegTestDataOperationCompleted(ByVal arg As Object)
            If (Not (Me.DropRegTestDataCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent DropRegTestDataCompleted(Me, New System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://dev.tranact.com.org/InsChecks", RequestNamespace:="http://dev.tranact.com.org/", ResponseNamespace:="http://dev.tranact.com.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Sub InsChecks(ByVal iBlockID As Integer, ByVal iTransID As Integer, ByVal iCustomerID As Integer)
            Me.Invoke("InsChecks", New Object() {iBlockID, iTransID, iCustomerID})
        End Sub
        
        '''<remarks/>
        Public Overloads Sub InsChecksAsync(ByVal iBlockID As Integer, ByVal iTransID As Integer, ByVal iCustomerID As Integer)
            Me.InsChecksAsync(iBlockID, iTransID, iCustomerID, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub InsChecksAsync(ByVal iBlockID As Integer, ByVal iTransID As Integer, ByVal iCustomerID As Integer, ByVal userState As Object)
            If (Me.InsChecksOperationCompleted Is Nothing) Then
                Me.InsChecksOperationCompleted = AddressOf Me.OnInsChecksOperationCompleted
            End If
            Me.InvokeAsync("InsChecks", New Object() {iBlockID, iTransID, iCustomerID}, Me.InsChecksOperationCompleted, userState)
        End Sub
        
        Private Sub OnInsChecksOperationCompleted(ByVal arg As Object)
            If (Not (Me.InsChecksCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent InsChecksCompleted(Me, New System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://dev.tranact.com.org/SaveImage", RequestNamespace:="http://dev.tranact.com.org/", ResponseNamespace:="http://dev.tranact.com.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function SaveImage(ByVal strCode As String, <System.Xml.Serialization.XmlElementAttribute(DataType:="base64Binary")> ByVal arrImg() As Byte, ByVal iCustID As Integer, ByVal iBlockID As Integer, ByVal iWksId As Integer, ByRef iTranID As Integer, ByRef strPan As String, ByVal iActID As Integer, ByVal mAmt As Decimal) As System.Xml.XmlElement
            Dim results() As Object = Me.Invoke("SaveImage", New Object() {strCode, arrImg, iCustID, iBlockID, iWksId, iTranID, strPan, iActID, mAmt})
            iTranID = CType(results(1),Integer)
            strPan = CType(results(2),String)
            Return CType(results(0),System.Xml.XmlElement)
        End Function
        
        '''<remarks/>
        Public Overloads Sub SaveImageAsync(ByVal strCode As String, ByVal arrImg() As Byte, ByVal iCustID As Integer, ByVal iBlockID As Integer, ByVal iWksId As Integer, ByVal iTranID As Integer, ByVal strPan As String, ByVal iActID As Integer, ByVal mAmt As Decimal)
            Me.SaveImageAsync(strCode, arrImg, iCustID, iBlockID, iWksId, iTranID, strPan, iActID, mAmt, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub SaveImageAsync(ByVal strCode As String, ByVal arrImg() As Byte, ByVal iCustID As Integer, ByVal iBlockID As Integer, ByVal iWksId As Integer, ByVal iTranID As Integer, ByVal strPan As String, ByVal iActID As Integer, ByVal mAmt As Decimal, ByVal userState As Object)
            If (Me.SaveImageOperationCompleted Is Nothing) Then
                Me.SaveImageOperationCompleted = AddressOf Me.OnSaveImageOperationCompleted
            End If
            Me.InvokeAsync("SaveImage", New Object() {strCode, arrImg, iCustID, iBlockID, iWksId, iTranID, strPan, iActID, mAmt}, Me.SaveImageOperationCompleted, userState)
        End Sub
        
        Private Sub OnSaveImageOperationCompleted(ByVal arg As Object)
            If (Not (Me.SaveImageCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent SaveImageCompleted(Me, New SaveImageCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://dev.tranact.com.org/GetImage", RequestNamespace:="http://dev.tranact.com.org/", ResponseNamespace:="http://dev.tranact.com.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetImage(ByRef iBlockID As Integer, ByVal iCustId As Integer, ByVal strCode As String, ByVal strPan As String) As <System.Xml.Serialization.XmlElementAttribute(DataType:="base64Binary")> Byte()
            Dim results() As Object = Me.Invoke("GetImage", New Object() {iBlockID, iCustId, strCode, strPan})
            iBlockID = CType(results(1),Integer)
            Return CType(results(0),Byte())
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetImageAsync(ByVal iBlockID As Integer, ByVal iCustId As Integer, ByVal strCode As String, ByVal strPan As String)
            Me.GetImageAsync(iBlockID, iCustId, strCode, strPan, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetImageAsync(ByVal iBlockID As Integer, ByVal iCustId As Integer, ByVal strCode As String, ByVal strPan As String, ByVal userState As Object)
            If (Me.GetImageOperationCompleted Is Nothing) Then
                Me.GetImageOperationCompleted = AddressOf Me.OnGetImageOperationCompleted
            End If
            Me.InvokeAsync("GetImage", New Object() {iBlockID, iCustId, strCode, strPan}, Me.GetImageOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetImageOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetImageCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetImageCompleted(Me, New GetImageCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://dev.tranact.com.org/DerivePasswordBytes", RequestNamespace:="http://dev.tranact.com.org/", ResponseNamespace:="http://dev.tranact.com.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function DerivePasswordBytes(<System.Xml.Serialization.XmlElementAttribute(DataType:="base64Binary")> ByVal password() As Byte, <System.Xml.Serialization.XmlElementAttribute(DataType:="base64Binary")> ByVal salt() As Byte, ByVal hashName As String, ByVal iterations As Integer, ByVal keySize As Integer) As <System.Xml.Serialization.XmlElementAttribute(DataType:="base64Binary")> Byte()
            Dim results() As Object = Me.Invoke("DerivePasswordBytes", New Object() {password, salt, hashName, iterations, keySize})
            Return CType(results(0),Byte())
        End Function
        
        '''<remarks/>
        Public Overloads Sub DerivePasswordBytesAsync(ByVal password() As Byte, ByVal salt() As Byte, ByVal hashName As String, ByVal iterations As Integer, ByVal keySize As Integer)
            Me.DerivePasswordBytesAsync(password, salt, hashName, iterations, keySize, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub DerivePasswordBytesAsync(ByVal password() As Byte, ByVal salt() As Byte, ByVal hashName As String, ByVal iterations As Integer, ByVal keySize As Integer, ByVal userState As Object)
            If (Me.DerivePasswordBytesOperationCompleted Is Nothing) Then
                Me.DerivePasswordBytesOperationCompleted = AddressOf Me.OnDerivePasswordBytesOperationCompleted
            End If
            Me.InvokeAsync("DerivePasswordBytes", New Object() {password, salt, hashName, iterations, keySize}, Me.DerivePasswordBytesOperationCompleted, userState)
        End Sub
        
        Private Sub OnDerivePasswordBytesOperationCompleted(ByVal arg As Object)
            If (Not (Me.DerivePasswordBytesCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent DerivePasswordBytesCompleted(Me, New DerivePasswordBytesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://dev.tranact.com.org/GetWorkstations", RequestNamespace:="http://dev.tranact.com.org/", ResponseNamespace:="http://dev.tranact.com.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetWorkstations() As Object()
            Dim results() As Object = Me.Invoke("GetWorkstations", New Object(-1) {})
            Return CType(results(0),Object())
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetWorkstationsAsync()
            Me.GetWorkstationsAsync(Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetWorkstationsAsync(ByVal userState As Object)
            If (Me.GetWorkstationsOperationCompleted Is Nothing) Then
                Me.GetWorkstationsOperationCompleted = AddressOf Me.OnGetWorkstationsOperationCompleted
            End If
            Me.InvokeAsync("GetWorkstations", New Object(-1) {}, Me.GetWorkstationsOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetWorkstationsOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetWorkstationsCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetWorkstationsCompleted(Me, New GetWorkstationsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://dev.tranact.com.org/GetWorkstationID", RequestNamespace:="http://dev.tranact.com.org/", ResponseNamespace:="http://dev.tranact.com.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetWorkstationID(ByVal IP As String) As Integer
            Dim results() As Object = Me.Invoke("GetWorkstationID", New Object() {IP})
            Return CType(results(0),Integer)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetWorkstationIDAsync(ByVal IP As String)
            Me.GetWorkstationIDAsync(IP, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetWorkstationIDAsync(ByVal IP As String, ByVal userState As Object)
            If (Me.GetWorkstationIDOperationCompleted Is Nothing) Then
                Me.GetWorkstationIDOperationCompleted = AddressOf Me.OnGetWorkstationIDOperationCompleted
            End If
            Me.InvokeAsync("GetWorkstationID", New Object() {IP}, Me.GetWorkstationIDOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetWorkstationIDOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetWorkstationIDCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetWorkstationIDCompleted(Me, New GetWorkstationIDCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://dev.tranact.com.org/PrepareTestData", RequestNamespace:="http://dev.tranact.com.org/", ResponseNamespace:="http://dev.tranact.com.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Sub PrepareTestData()
            Me.Invoke("PrepareTestData", New Object(-1) {})
        End Sub
        
        '''<remarks/>
        Public Overloads Sub PrepareTestDataAsync()
            Me.PrepareTestDataAsync(Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub PrepareTestDataAsync(ByVal userState As Object)
            If (Me.PrepareTestDataOperationCompleted Is Nothing) Then
                Me.PrepareTestDataOperationCompleted = AddressOf Me.OnPrepareTestDataOperationCompleted
            End If
            Me.InvokeAsync("PrepareTestData", New Object(-1) {}, Me.PrepareTestDataOperationCompleted, userState)
        End Sub
        
        Private Sub OnPrepareTestDataOperationCompleted(ByVal arg As Object)
            If (Not (Me.PrepareTestDataCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent PrepareTestDataCompleted(Me, New System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://dev.tranact.com.org/Encrypt", RequestNamespace:="http://dev.tranact.com.org/", ResponseNamespace:="http://dev.tranact.com.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function Encrypt(ByVal strEncrypt As String) As String
            Dim results() As Object = Me.Invoke("Encrypt", New Object() {strEncrypt})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub EncryptAsync(ByVal strEncrypt As String)
            Me.EncryptAsync(strEncrypt, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub EncryptAsync(ByVal strEncrypt As String, ByVal userState As Object)
            If (Me.EncryptOperationCompleted Is Nothing) Then
                Me.EncryptOperationCompleted = AddressOf Me.OnEncryptOperationCompleted
            End If
            Me.InvokeAsync("Encrypt", New Object() {strEncrypt}, Me.EncryptOperationCompleted, userState)
        End Sub
        
        Private Sub OnEncryptOperationCompleted(ByVal arg As Object)
            If (Not (Me.EncryptCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent EncryptCompleted(Me, New EncryptCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://dev.tranact.com.org/GetKioskSettings", RequestNamespace:="http://dev.tranact.com.org/", ResponseNamespace:="http://dev.tranact.com.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetKioskSettings(ByVal strName As String, ByVal iWksID As Integer) As String
            Dim results() As Object = Me.Invoke("GetKioskSettings", New Object() {strName, iWksID})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetKioskSettingsAsync(ByVal strName As String, ByVal iWksID As Integer)
            Me.GetKioskSettingsAsync(strName, iWksID, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetKioskSettingsAsync(ByVal strName As String, ByVal iWksID As Integer, ByVal userState As Object)
            If (Me.GetKioskSettingsOperationCompleted Is Nothing) Then
                Me.GetKioskSettingsOperationCompleted = AddressOf Me.OnGetKioskSettingsOperationCompleted
            End If
            Me.InvokeAsync("GetKioskSettings", New Object() {strName, iWksID}, Me.GetKioskSettingsOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetKioskSettingsOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetKioskSettingsCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetKioskSettingsCompleted(Me, New GetKioskSettingsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://dev.tranact.com.org/GetLangName", RequestNamespace:="http://dev.tranact.com.org/", ResponseNamespace:="http://dev.tranact.com.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetLangName(ByVal iLangId As Integer) As String
            Dim results() As Object = Me.Invoke("GetLangName", New Object() {iLangId})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetLangNameAsync(ByVal iLangId As Integer)
            Me.GetLangNameAsync(iLangId, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetLangNameAsync(ByVal iLangId As Integer, ByVal userState As Object)
            If (Me.GetLangNameOperationCompleted Is Nothing) Then
                Me.GetLangNameOperationCompleted = AddressOf Me.OnGetLangNameOperationCompleted
            End If
            Me.InvokeAsync("GetLangName", New Object() {iLangId}, Me.GetLangNameOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetLangNameOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetLangNameCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetLangNameCompleted(Me, New GetLangNameCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://dev.tranact.com.org/GetTranslation", RequestNamespace:="http://dev.tranact.com.org/", ResponseNamespace:="http://dev.tranact.com.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetTranslation(ByVal iLangId As Integer, ByVal strLabel As String) As String
            Dim results() As Object = Me.Invoke("GetTranslation", New Object() {iLangId, strLabel})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetTranslationAsync(ByVal iLangId As Integer, ByVal strLabel As String)
            Me.GetTranslationAsync(iLangId, strLabel, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetTranslationAsync(ByVal iLangId As Integer, ByVal strLabel As String, ByVal userState As Object)
            If (Me.GetTranslationOperationCompleted Is Nothing) Then
                Me.GetTranslationOperationCompleted = AddressOf Me.OnGetTranslationOperationCompleted
            End If
            Me.InvokeAsync("GetTranslation", New Object() {iLangId, strLabel}, Me.GetTranslationOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetTranslationOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetTranslationCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetTranslationCompleted(Me, New GetTranslationCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://dev.tranact.com.org/GetLangID", RequestNamespace:="http://dev.tranact.com.org/", ResponseNamespace:="http://dev.tranact.com.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetLangID(ByVal strLangName As String) As Integer
            Dim results() As Object = Me.Invoke("GetLangID", New Object() {strLangName})
            Return CType(results(0),Integer)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetLangIDAsync(ByVal strLangName As String)
            Me.GetLangIDAsync(strLangName, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetLangIDAsync(ByVal strLangName As String, ByVal userState As Object)
            If (Me.GetLangIDOperationCompleted Is Nothing) Then
                Me.GetLangIDOperationCompleted = AddressOf Me.OnGetLangIDOperationCompleted
            End If
            Me.InvokeAsync("GetLangID", New Object() {strLangName}, Me.GetLangIDOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetLangIDOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetLangIDCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetLangIDCompleted(Me, New GetLangIDCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://dev.tranact.com.org/GetCustomerDataFromScan", RequestNamespace:="http://dev.tranact.com.org/", ResponseNamespace:="http://dev.tranact.com.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetCustomerDataFromScan(ByVal iScanID As Integer) As System.Xml.XmlNode
            Dim results() As Object = Me.Invoke("GetCustomerDataFromScan", New Object() {iScanID})
            Return CType(results(0),System.Xml.XmlNode)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetCustomerDataFromScanAsync(ByVal iScanID As Integer)
            Me.GetCustomerDataFromScanAsync(iScanID, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetCustomerDataFromScanAsync(ByVal iScanID As Integer, ByVal userState As Object)
            If (Me.GetCustomerDataFromScanOperationCompleted Is Nothing) Then
                Me.GetCustomerDataFromScanOperationCompleted = AddressOf Me.OnGetCustomerDataFromScanOperationCompleted
            End If
            Me.InvokeAsync("GetCustomerDataFromScan", New Object() {iScanID}, Me.GetCustomerDataFromScanOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetCustomerDataFromScanOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetCustomerDataFromScanCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetCustomerDataFromScanCompleted(Me, New GetCustomerDataFromScanCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://dev.tranact.com.org/GetCheckData", RequestNamespace:="http://dev.tranact.com.org/", ResponseNamespace:="http://dev.tranact.com.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetCheckData(ByVal iCustID As Integer, ByVal iBlockID As Integer) As System.Xml.XmlElement
            Dim results() As Object = Me.Invoke("GetCheckData", New Object() {iCustID, iBlockID})
            Return CType(results(0),System.Xml.XmlElement)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetCheckDataAsync(ByVal iCustID As Integer, ByVal iBlockID As Integer)
            Me.GetCheckDataAsync(iCustID, iBlockID, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetCheckDataAsync(ByVal iCustID As Integer, ByVal iBlockID As Integer, ByVal userState As Object)
            If (Me.GetCheckDataOperationCompleted Is Nothing) Then
                Me.GetCheckDataOperationCompleted = AddressOf Me.OnGetCheckDataOperationCompleted
            End If
            Me.InvokeAsync("GetCheckData", New Object() {iCustID, iBlockID}, Me.GetCheckDataOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetCheckDataOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetCheckDataCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetCheckDataCompleted(Me, New GetCheckDataCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://dev.tranact.com.org/GetCompaniesList", RequestNamespace:="http://dev.tranact.com.org/", ResponseNamespace:="http://dev.tranact.com.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetCompaniesList() As clsCompany()
            Dim results() As Object = Me.Invoke("GetCompaniesList", New Object(-1) {})
            Return CType(results(0),clsCompany())
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetCompaniesListAsync()
            Me.GetCompaniesListAsync(Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetCompaniesListAsync(ByVal userState As Object)
            If (Me.GetCompaniesListOperationCompleted Is Nothing) Then
                Me.GetCompaniesListOperationCompleted = AddressOf Me.OnGetCompaniesListOperationCompleted
            End If
            Me.InvokeAsync("GetCompaniesList", New Object(-1) {}, Me.GetCompaniesListOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetCompaniesListOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetCompaniesListCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetCompaniesListCompleted(Me, New GetCompaniesListCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://dev.tranact.com.org/HasCheckBeenReviewed", RequestNamespace:="http://dev.tranact.com.org/", ResponseNamespace:="http://dev.tranact.com.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function HasCheckBeenReviewed(ByVal strAcct As String, ByVal strRoute As String, ByVal strCheckNum As String, ByVal iCustID As Integer, ByVal iWksID As Integer) As System.Xml.XmlNode
            Dim results() As Object = Me.Invoke("HasCheckBeenReviewed", New Object() {strAcct, strRoute, strCheckNum, iCustID, iWksID})
            Return CType(results(0),System.Xml.XmlNode)
        End Function
        
        '''<remarks/>
        Public Overloads Sub HasCheckBeenReviewedAsync(ByVal strAcct As String, ByVal strRoute As String, ByVal strCheckNum As String, ByVal iCustID As Integer, ByVal iWksID As Integer)
            Me.HasCheckBeenReviewedAsync(strAcct, strRoute, strCheckNum, iCustID, iWksID, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub HasCheckBeenReviewedAsync(ByVal strAcct As String, ByVal strRoute As String, ByVal strCheckNum As String, ByVal iCustID As Integer, ByVal iWksID As Integer, ByVal userState As Object)
            If (Me.HasCheckBeenReviewedOperationCompleted Is Nothing) Then
                Me.HasCheckBeenReviewedOperationCompleted = AddressOf Me.OnHasCheckBeenReviewedOperationCompleted
            End If
            Me.InvokeAsync("HasCheckBeenReviewed", New Object() {strAcct, strRoute, strCheckNum, iCustID, iWksID}, Me.HasCheckBeenReviewedOperationCompleted, userState)
        End Sub
        
        Private Sub OnHasCheckBeenReviewedOperationCompleted(ByVal arg As Object)
            If (Not (Me.HasCheckBeenReviewedCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent HasCheckBeenReviewedCompleted(Me, New HasCheckBeenReviewedCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://dev.tranact.com.org/GetRandomNumber", RequestNamespace:="http://dev.tranact.com.org/", ResponseNamespace:="http://dev.tranact.com.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetRandomNumber(ByVal numDigits As Integer, ByVal max As Integer) As Integer
            Dim results() As Object = Me.Invoke("GetRandomNumber", New Object() {numDigits, max})
            Return CType(results(0),Integer)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetRandomNumberAsync(ByVal numDigits As Integer, ByVal max As Integer)
            Me.GetRandomNumberAsync(numDigits, max, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetRandomNumberAsync(ByVal numDigits As Integer, ByVal max As Integer, ByVal userState As Object)
            If (Me.GetRandomNumberOperationCompleted Is Nothing) Then
                Me.GetRandomNumberOperationCompleted = AddressOf Me.OnGetRandomNumberOperationCompleted
            End If
            Me.InvokeAsync("GetRandomNumber", New Object() {numDigits, max}, Me.GetRandomNumberOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetRandomNumberOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetRandomNumberCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetRandomNumberCompleted(Me, New GetRandomNumberCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://dev.tranact.com.org/GetCompanyData", RequestNamespace:="http://dev.tranact.com.org/", ResponseNamespace:="http://dev.tranact.com.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetCompanyData(ByVal CompanyID As Integer) As System.Xml.XmlElement
            Dim results() As Object = Me.Invoke("GetCompanyData", New Object() {CompanyID})
            Return CType(results(0),System.Xml.XmlElement)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetCompanyDataAsync(ByVal CompanyID As Integer)
            Me.GetCompanyDataAsync(CompanyID, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetCompanyDataAsync(ByVal CompanyID As Integer, ByVal userState As Object)
            If (Me.GetCompanyDataOperationCompleted Is Nothing) Then
                Me.GetCompanyDataOperationCompleted = AddressOf Me.OnGetCompanyDataOperationCompleted
            End If
            Me.InvokeAsync("GetCompanyData", New Object() {CompanyID}, Me.GetCompanyDataOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetCompanyDataOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetCompanyDataCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetCompanyDataCompleted(Me, New GetCompanyDataCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://dev.tranact.com.org/GetActiveAccounts", RequestNamespace:="http://dev.tranact.com.org/", ResponseNamespace:="http://dev.tranact.com.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetActiveAccounts(ByVal iCustID As Integer) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("GetActiveAccounts", New Object() {iCustID})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetActiveAccountsAsync(ByVal iCustID As Integer)
            Me.GetActiveAccountsAsync(iCustID, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetActiveAccountsAsync(ByVal iCustID As Integer, ByVal userState As Object)
            If (Me.GetActiveAccountsOperationCompleted Is Nothing) Then
                Me.GetActiveAccountsOperationCompleted = AddressOf Me.OnGetActiveAccountsOperationCompleted
            End If
            Me.InvokeAsync("GetActiveAccounts", New Object() {iCustID}, Me.GetActiveAccountsOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetActiveAccountsOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetActiveAccountsCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetActiveAccountsCompleted(Me, New GetActiveAccountsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://dev.tranact.com.org/GetHeldEZCashTrans", RequestNamespace:="http://dev.tranact.com.org/", ResponseNamespace:="http://dev.tranact.com.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetHeldEZCashTrans(ByVal iCustID As Integer) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("GetHeldEZCashTrans", New Object() {iCustID})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetHeldEZCashTransAsync(ByVal iCustID As Integer)
            Me.GetHeldEZCashTransAsync(iCustID, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetHeldEZCashTransAsync(ByVal iCustID As Integer, ByVal userState As Object)
            If (Me.GetHeldEZCashTransOperationCompleted Is Nothing) Then
                Me.GetHeldEZCashTransOperationCompleted = AddressOf Me.OnGetHeldEZCashTransOperationCompleted
            End If
            Me.InvokeAsync("GetHeldEZCashTrans", New Object() {iCustID}, Me.GetHeldEZCashTransOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetHeldEZCashTransOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetHeldEZCashTransCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetHeldEZCashTransCompleted(Me, New GetHeldEZCashTransCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://dev.tranact.com.org/GetAllTransactionsByBlock", RequestNamespace:="http://dev.tranact.com.org/", ResponseNamespace:="http://dev.tranact.com.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetAllTransactionsByBlock(ByVal iBlockID As Integer, ByVal iCustID As Integer, ByVal iTranID As Integer, ByVal acctDs As System.Data.DataSet, ByVal feeCompDs As System.Data.DataSet) As clsBlockDetails
            Dim results() As Object = Me.Invoke("GetAllTransactionsByBlock", New Object() {iBlockID, iCustID, iTranID, acctDs, feeCompDs})
            Return CType(results(0),clsBlockDetails)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetAllTransactionsByBlockAsync(ByVal iBlockID As Integer, ByVal iCustID As Integer, ByVal iTranID As Integer, ByVal acctDs As System.Data.DataSet, ByVal feeCompDs As System.Data.DataSet)
            Me.GetAllTransactionsByBlockAsync(iBlockID, iCustID, iTranID, acctDs, feeCompDs, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetAllTransactionsByBlockAsync(ByVal iBlockID As Integer, ByVal iCustID As Integer, ByVal iTranID As Integer, ByVal acctDs As System.Data.DataSet, ByVal feeCompDs As System.Data.DataSet, ByVal userState As Object)
            If (Me.GetAllTransactionsByBlockOperationCompleted Is Nothing) Then
                Me.GetAllTransactionsByBlockOperationCompleted = AddressOf Me.OnGetAllTransactionsByBlockOperationCompleted
            End If
            Me.InvokeAsync("GetAllTransactionsByBlock", New Object() {iBlockID, iCustID, iTranID, acctDs, feeCompDs}, Me.GetAllTransactionsByBlockOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetAllTransactionsByBlockOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetAllTransactionsByBlockCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetAllTransactionsByBlockCompleted(Me, New GetAllTransactionsByBlockCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://dev.tranact.com.org/GetEZCashAccounts", RequestNamespace:="http://dev.tranact.com.org/", ResponseNamespace:="http://dev.tranact.com.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetEZCashAccounts(ByVal iCustID As Integer) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("GetEZCashAccounts", New Object() {iCustID})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetEZCashAccountsAsync(ByVal iCustID As Integer)
            Me.GetEZCashAccountsAsync(iCustID, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetEZCashAccountsAsync(ByVal iCustID As Integer, ByVal userState As Object)
            If (Me.GetEZCashAccountsOperationCompleted Is Nothing) Then
                Me.GetEZCashAccountsOperationCompleted = AddressOf Me.OnGetEZCashAccountsOperationCompleted
            End If
            Me.InvokeAsync("GetEZCashAccounts", New Object() {iCustID}, Me.GetEZCashAccountsOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetEZCashAccountsOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetEZCashAccountsCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetEZCashAccountsCompleted(Me, New GetEZCashAccountsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://dev.tranact.com.org/GetFeeWebComps", RequestNamespace:="http://dev.tranact.com.org/", ResponseNamespace:="http://dev.tranact.com.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetFeeWebComps() As System.Data.DataSet
            Dim results() As Object = Me.Invoke("GetFeeWebComps", New Object(-1) {})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetFeeWebCompsAsync()
            Me.GetFeeWebCompsAsync(Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetFeeWebCompsAsync(ByVal userState As Object)
            If (Me.GetFeeWebCompsOperationCompleted Is Nothing) Then
                Me.GetFeeWebCompsOperationCompleted = AddressOf Me.OnGetFeeWebCompsOperationCompleted
            End If
            Me.InvokeAsync("GetFeeWebComps", New Object(-1) {}, Me.GetFeeWebCompsOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetFeeWebCompsOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetFeeWebCompsCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetFeeWebCompsCompleted(Me, New GetFeeWebCompsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://dev.tranact.com.org/GetEZCashDepositAccounts", RequestNamespace:="http://dev.tranact.com.org/", ResponseNamespace:="http://dev.tranact.com.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetEZCashDepositAccounts(ByVal iCustID As Integer) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("GetEZCashDepositAccounts", New Object() {iCustID})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetEZCashDepositAccountsAsync(ByVal iCustID As Integer)
            Me.GetEZCashDepositAccountsAsync(iCustID, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetEZCashDepositAccountsAsync(ByVal iCustID As Integer, ByVal userState As Object)
            If (Me.GetEZCashDepositAccountsOperationCompleted Is Nothing) Then
                Me.GetEZCashDepositAccountsOperationCompleted = AddressOf Me.OnGetEZCashDepositAccountsOperationCompleted
            End If
            Me.InvokeAsync("GetEZCashDepositAccounts", New Object() {iCustID}, Me.GetEZCashDepositAccountsOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetEZCashDepositAccountsOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetEZCashDepositAccountsCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetEZCashDepositAccountsCompleted(Me, New GetEZCashDepositAccountsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://dev.tranact.com.org/GetEZCashInactiveAccounts", RequestNamespace:="http://dev.tranact.com.org/", ResponseNamespace:="http://dev.tranact.com.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetEZCashInactiveAccounts(ByVal iCustID As Integer) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("GetEZCashInactiveAccounts", New Object() {iCustID})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetEZCashInactiveAccountsAsync(ByVal iCustID As Integer)
            Me.GetEZCashInactiveAccountsAsync(iCustID, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetEZCashInactiveAccountsAsync(ByVal iCustID As Integer, ByVal userState As Object)
            If (Me.GetEZCashInactiveAccountsOperationCompleted Is Nothing) Then
                Me.GetEZCashInactiveAccountsOperationCompleted = AddressOf Me.OnGetEZCashInactiveAccountsOperationCompleted
            End If
            Me.InvokeAsync("GetEZCashInactiveAccounts", New Object() {iCustID}, Me.GetEZCashInactiveAccountsOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetEZCashInactiveAccountsOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetEZCashInactiveAccountsCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetEZCashInactiveAccountsCompleted(Me, New GetEZCashInactiveAccountsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://dev.tranact.com.org/GetAllTransactionsDS", RequestNamespace:="http://dev.tranact.com.org/", ResponseNamespace:="http://dev.tranact.com.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetAllTransactionsDS(ByVal iCustID As Integer, ByVal acctDs As System.Data.DataSet, ByVal dtFrom As String, ByVal dtTo As String) As clsTranRow()
            Dim results() As Object = Me.Invoke("GetAllTransactionsDS", New Object() {iCustID, acctDs, dtFrom, dtTo})
            Return CType(results(0),clsTranRow())
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetAllTransactionsDSAsync(ByVal iCustID As Integer, ByVal acctDs As System.Data.DataSet, ByVal dtFrom As String, ByVal dtTo As String)
            Me.GetAllTransactionsDSAsync(iCustID, acctDs, dtFrom, dtTo, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetAllTransactionsDSAsync(ByVal iCustID As Integer, ByVal acctDs As System.Data.DataSet, ByVal dtFrom As String, ByVal dtTo As String, ByVal userState As Object)
            If (Me.GetAllTransactionsDSOperationCompleted Is Nothing) Then
                Me.GetAllTransactionsDSOperationCompleted = AddressOf Me.OnGetAllTransactionsDSOperationCompleted
            End If
            Me.InvokeAsync("GetAllTransactionsDS", New Object() {iCustID, acctDs, dtFrom, dtTo}, Me.GetAllTransactionsDSOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetAllTransactionsDSOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetAllTransactionsDSCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetAllTransactionsDSCompleted(Me, New GetAllTransactionsDSCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://dev.tranact.com.org/GetAllTransactionsByAcct", RequestNamespace:="http://dev.tranact.com.org/", ResponseNamespace:="http://dev.tranact.com.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetAllTransactionsByAcct(ByVal iActID As Integer) As clsTranRow()
            Dim results() As Object = Me.Invoke("GetAllTransactionsByAcct", New Object() {iActID})
            Return CType(results(0),clsTranRow())
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetAllTransactionsByAcctAsync(ByVal iActID As Integer)
            Me.GetAllTransactionsByAcctAsync(iActID, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetAllTransactionsByAcctAsync(ByVal iActID As Integer, ByVal userState As Object)
            If (Me.GetAllTransactionsByAcctOperationCompleted Is Nothing) Then
                Me.GetAllTransactionsByAcctOperationCompleted = AddressOf Me.OnGetAllTransactionsByAcctOperationCompleted
            End If
            Me.InvokeAsync("GetAllTransactionsByAcct", New Object() {iActID}, Me.GetAllTransactionsByAcctOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetAllTransactionsByAcctOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetAllTransactionsByAcctCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetAllTransactionsByAcctCompleted(Me, New GetAllTransactionsByAcctCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://dev.tranact.com.org/GetEZCashTransactions", RequestNamespace:="http://dev.tranact.com.org/", ResponseNamespace:="http://dev.tranact.com.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetEZCashTransactions(ByVal iCustID As Integer) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("GetEZCashTransactions", New Object() {iCustID})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetEZCashTransactionsAsync(ByVal iCustID As Integer)
            Me.GetEZCashTransactionsAsync(iCustID, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetEZCashTransactionsAsync(ByVal iCustID As Integer, ByVal userState As Object)
            If (Me.GetEZCashTransactionsOperationCompleted Is Nothing) Then
                Me.GetEZCashTransactionsOperationCompleted = AddressOf Me.OnGetEZCashTransactionsOperationCompleted
            End If
            Me.InvokeAsync("GetEZCashTransactions", New Object() {iCustID}, Me.GetEZCashTransactionsOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetEZCashTransactionsOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetEZCashTransactionsCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetEZCashTransactionsCompleted(Me, New GetEZCashTransactionsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://dev.tranact.com.org/IFX_GetTransactionByTranID", RequestNamespace:="http://dev.tranact.com.org/", ResponseNamespace:="http://dev.tranact.com.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function IFX_GetTransactionByTranID(ByVal iTranID As Integer) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("IFX_GetTransactionByTranID", New Object() {iTranID})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub IFX_GetTransactionByTranIDAsync(ByVal iTranID As Integer)
            Me.IFX_GetTransactionByTranIDAsync(iTranID, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub IFX_GetTransactionByTranIDAsync(ByVal iTranID As Integer, ByVal userState As Object)
            If (Me.IFX_GetTransactionByTranIDOperationCompleted Is Nothing) Then
                Me.IFX_GetTransactionByTranIDOperationCompleted = AddressOf Me.OnIFX_GetTransactionByTranIDOperationCompleted
            End If
            Me.InvokeAsync("IFX_GetTransactionByTranID", New Object() {iTranID}, Me.IFX_GetTransactionByTranIDOperationCompleted, userState)
        End Sub
        
        Private Sub OnIFX_GetTransactionByTranIDOperationCompleted(ByVal arg As Object)
            If (Not (Me.IFX_GetTransactionByTranIDCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent IFX_GetTransactionByTranIDCompleted(Me, New IFX_GetTransactionByTranIDCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://dev.tranact.com.org/GetEZCashTransactionsByBlockID", RequestNamespace:="http://dev.tranact.com.org/", ResponseNamespace:="http://dev.tranact.com.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetEZCashTransactionsByBlockID(ByVal iBlockID As Integer, ByVal iCustID As Integer) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("GetEZCashTransactionsByBlockID", New Object() {iBlockID, iCustID})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetEZCashTransactionsByBlockIDAsync(ByVal iBlockID As Integer, ByVal iCustID As Integer)
            Me.GetEZCashTransactionsByBlockIDAsync(iBlockID, iCustID, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetEZCashTransactionsByBlockIDAsync(ByVal iBlockID As Integer, ByVal iCustID As Integer, ByVal userState As Object)
            If (Me.GetEZCashTransactionsByBlockIDOperationCompleted Is Nothing) Then
                Me.GetEZCashTransactionsByBlockIDOperationCompleted = AddressOf Me.OnGetEZCashTransactionsByBlockIDOperationCompleted
            End If
            Me.InvokeAsync("GetEZCashTransactionsByBlockID", New Object() {iBlockID, iCustID}, Me.GetEZCashTransactionsByBlockIDOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetEZCashTransactionsByBlockIDOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetEZCashTransactionsByBlockIDCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetEZCashTransactionsByBlockIDCompleted(Me, New GetEZCashTransactionsByBlockIDCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://dev.tranact.com.org/GetIFXTransactionsByBlockIDAndCustID", RequestNamespace:="http://dev.tranact.com.org/", ResponseNamespace:="http://dev.tranact.com.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetIFXTransactionsByBlockIDAndCustID(ByVal iBlockID As Integer, ByVal iCustID As Integer) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("GetIFXTransactionsByBlockIDAndCustID", New Object() {iBlockID, iCustID})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetIFXTransactionsByBlockIDAndCustIDAsync(ByVal iBlockID As Integer, ByVal iCustID As Integer)
            Me.GetIFXTransactionsByBlockIDAndCustIDAsync(iBlockID, iCustID, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetIFXTransactionsByBlockIDAndCustIDAsync(ByVal iBlockID As Integer, ByVal iCustID As Integer, ByVal userState As Object)
            If (Me.GetIFXTransactionsByBlockIDAndCustIDOperationCompleted Is Nothing) Then
                Me.GetIFXTransactionsByBlockIDAndCustIDOperationCompleted = AddressOf Me.OnGetIFXTransactionsByBlockIDAndCustIDOperationCompleted
            End If
            Me.InvokeAsync("GetIFXTransactionsByBlockIDAndCustID", New Object() {iBlockID, iCustID}, Me.GetIFXTransactionsByBlockIDAndCustIDOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetIFXTransactionsByBlockIDAndCustIDOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetIFXTransactionsByBlockIDAndCustIDCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetIFXTransactionsByBlockIDAndCustIDCompleted(Me, New GetIFXTransactionsByBlockIDAndCustIDCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://dev.tranact.com.org/GetSystemSettings", RequestNamespace:="http://dev.tranact.com.org/", ResponseNamespace:="http://dev.tranact.com.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetSystemSettings(ByVal strkey As String) As String
            Dim results() As Object = Me.Invoke("GetSystemSettings", New Object() {strkey})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetSystemSettingsAsync(ByVal strkey As String)
            Me.GetSystemSettingsAsync(strkey, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetSystemSettingsAsync(ByVal strkey As String, ByVal userState As Object)
            If (Me.GetSystemSettingsOperationCompleted Is Nothing) Then
                Me.GetSystemSettingsOperationCompleted = AddressOf Me.OnGetSystemSettingsOperationCompleted
            End If
            Me.InvokeAsync("GetSystemSettings", New Object() {strkey}, Me.GetSystemSettingsOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetSystemSettingsOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetSystemSettingsCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetSystemSettingsCompleted(Me, New GetSystemSettingsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://dev.tranact.com.org/GetEZCashTransactionsByAcctID", RequestNamespace:="http://dev.tranact.com.org/", ResponseNamespace:="http://dev.tranact.com.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetEZCashTransactionsByAcctID(ByVal ActID As String) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("GetEZCashTransactionsByAcctID", New Object() {ActID})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetEZCashTransactionsByAcctIDAsync(ByVal ActID As String)
            Me.GetEZCashTransactionsByAcctIDAsync(ActID, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetEZCashTransactionsByAcctIDAsync(ByVal ActID As String, ByVal userState As Object)
            If (Me.GetEZCashTransactionsByAcctIDOperationCompleted Is Nothing) Then
                Me.GetEZCashTransactionsByAcctIDOperationCompleted = AddressOf Me.OnGetEZCashTransactionsByAcctIDOperationCompleted
            End If
            Me.InvokeAsync("GetEZCashTransactionsByAcctID", New Object() {ActID}, Me.GetEZCashTransactionsByAcctIDOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetEZCashTransactionsByAcctIDOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetEZCashTransactionsByAcctIDCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetEZCashTransactionsByAcctIDCompleted(Me, New GetEZCashTransactionsByAcctIDCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://dev.tranact.com.org/SaveCustomerCard", RequestNamespace:="http://dev.tranact.com.org/", ResponseNamespace:="http://dev.tranact.com.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function SaveCustomerCard(ByVal iCustID As Integer, ByVal strPan As String, ByVal strCDType As String, ByVal bLoadable As Boolean, ByVal strActNbr As String, ByVal CompanyID As Integer) As Integer
            Dim results() As Object = Me.Invoke("SaveCustomerCard", New Object() {iCustID, strPan, strCDType, bLoadable, strActNbr, CompanyID})
            Return CType(results(0),Integer)
        End Function
        
        '''<remarks/>
        Public Overloads Sub SaveCustomerCardAsync(ByVal iCustID As Integer, ByVal strPan As String, ByVal strCDType As String, ByVal bLoadable As Boolean, ByVal strActNbr As String, ByVal CompanyID As Integer)
            Me.SaveCustomerCardAsync(iCustID, strPan, strCDType, bLoadable, strActNbr, CompanyID, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub SaveCustomerCardAsync(ByVal iCustID As Integer, ByVal strPan As String, ByVal strCDType As String, ByVal bLoadable As Boolean, ByVal strActNbr As String, ByVal CompanyID As Integer, ByVal userState As Object)
            If (Me.SaveCustomerCardOperationCompleted Is Nothing) Then
                Me.SaveCustomerCardOperationCompleted = AddressOf Me.OnSaveCustomerCardOperationCompleted
            End If
            Me.InvokeAsync("SaveCustomerCard", New Object() {iCustID, strPan, strCDType, bLoadable, strActNbr, CompanyID}, Me.SaveCustomerCardOperationCompleted, userState)
        End Sub
        
        Private Sub OnSaveCustomerCardOperationCompleted(ByVal arg As Object)
            If (Not (Me.SaveCustomerCardCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent SaveCustomerCardCompleted(Me, New SaveCustomerCardCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://dev.tranact.com.org/GetCustomerDataFromID", RequestNamespace:="http://dev.tranact.com.org/", ResponseNamespace:="http://dev.tranact.com.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetCustomerDataFromID(ByVal strPhotoID As String, ByVal dDOB As Date, ByVal strState As String, ByVal iCustomerID As Integer, ByVal strRouteNumber As String, ByVal strAccountNumber As String, ByVal iCheckNumber As Integer, ByVal mNetAmt As Decimal, ByVal iWksID As Integer) As System.Xml.XmlNode
            Dim results() As Object = Me.Invoke("GetCustomerDataFromID", New Object() {strPhotoID, dDOB, strState, iCustomerID, strRouteNumber, strAccountNumber, iCheckNumber, mNetAmt, iWksID})
            Return CType(results(0),System.Xml.XmlNode)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetCustomerDataFromIDAsync(ByVal strPhotoID As String, ByVal dDOB As Date, ByVal strState As String, ByVal iCustomerID As Integer, ByVal strRouteNumber As String, ByVal strAccountNumber As String, ByVal iCheckNumber As Integer, ByVal mNetAmt As Decimal, ByVal iWksID As Integer)
            Me.GetCustomerDataFromIDAsync(strPhotoID, dDOB, strState, iCustomerID, strRouteNumber, strAccountNumber, iCheckNumber, mNetAmt, iWksID, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetCustomerDataFromIDAsync(ByVal strPhotoID As String, ByVal dDOB As Date, ByVal strState As String, ByVal iCustomerID As Integer, ByVal strRouteNumber As String, ByVal strAccountNumber As String, ByVal iCheckNumber As Integer, ByVal mNetAmt As Decimal, ByVal iWksID As Integer, ByVal userState As Object)
            If (Me.GetCustomerDataFromIDOperationCompleted Is Nothing) Then
                Me.GetCustomerDataFromIDOperationCompleted = AddressOf Me.OnGetCustomerDataFromIDOperationCompleted
            End If
            Me.InvokeAsync("GetCustomerDataFromID", New Object() {strPhotoID, dDOB, strState, iCustomerID, strRouteNumber, strAccountNumber, iCheckNumber, mNetAmt, iWksID}, Me.GetCustomerDataFromIDOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetCustomerDataFromIDOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetCustomerDataFromIDCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetCustomerDataFromIDCompleted(Me, New GetCustomerDataFromIDCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://dev.tranact.com.org/PostLostCard", RequestNamespace:="http://dev.tranact.com.org/", ResponseNamespace:="http://dev.tranact.com.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function PostLostCard(ByVal strPhotoID As String, ByVal dDOB As Date, ByVal strState As String, ByVal iCustomerID As Integer, ByVal LostCardCode As Integer, ByVal strNewPan As String, ByVal iWksID As Integer, ByVal strProviderID As String) As System.Xml.XmlNode
            Dim results() As Object = Me.Invoke("PostLostCard", New Object() {strPhotoID, dDOB, strState, iCustomerID, LostCardCode, strNewPan, iWksID, strProviderID})
            Return CType(results(0),System.Xml.XmlNode)
        End Function
        
        '''<remarks/>
        Public Overloads Sub PostLostCardAsync(ByVal strPhotoID As String, ByVal dDOB As Date, ByVal strState As String, ByVal iCustomerID As Integer, ByVal LostCardCode As Integer, ByVal strNewPan As String, ByVal iWksID As Integer, ByVal strProviderID As String)
            Me.PostLostCardAsync(strPhotoID, dDOB, strState, iCustomerID, LostCardCode, strNewPan, iWksID, strProviderID, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub PostLostCardAsync(ByVal strPhotoID As String, ByVal dDOB As Date, ByVal strState As String, ByVal iCustomerID As Integer, ByVal LostCardCode As Integer, ByVal strNewPan As String, ByVal iWksID As Integer, ByVal strProviderID As String, ByVal userState As Object)
            If (Me.PostLostCardOperationCompleted Is Nothing) Then
                Me.PostLostCardOperationCompleted = AddressOf Me.OnPostLostCardOperationCompleted
            End If
            Me.InvokeAsync("PostLostCard", New Object() {strPhotoID, dDOB, strState, iCustomerID, LostCardCode, strNewPan, iWksID, strProviderID}, Me.PostLostCardOperationCompleted, userState)
        End Sub
        
        Private Sub OnPostLostCardOperationCompleted(ByVal arg As Object)
            If (Not (Me.PostLostCardCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent PostLostCardCompleted(Me, New PostLostCardCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://dev.tranact.com.org/Test", RequestNamespace:="http://dev.tranact.com.org/", ResponseNamespace:="http://dev.tranact.com.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function Test() As System.Xml.XmlNode
            Dim results() As Object = Me.Invoke("Test", New Object(-1) {})
            Return CType(results(0),System.Xml.XmlNode)
        End Function
        
        '''<remarks/>
        Public Overloads Sub TestAsync()
            Me.TestAsync(Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub TestAsync(ByVal userState As Object)
            If (Me.TestOperationCompleted Is Nothing) Then
                Me.TestOperationCompleted = AddressOf Me.OnTestOperationCompleted
            End If
            Me.InvokeAsync("Test", New Object(-1) {}, Me.TestOperationCompleted, userState)
        End Sub
        
        Private Sub OnTestOperationCompleted(ByVal arg As Object)
            If (Not (Me.TestCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent TestCompleted(Me, New TestCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://dev.tranact.com.org/Hash", RequestNamespace:="http://dev.tranact.com.org/", ResponseNamespace:="http://dev.tranact.com.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function Hash(ByVal strClear As String) As String
            Dim results() As Object = Me.Invoke("Hash", New Object() {strClear})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub HashAsync(ByVal strClear As String)
            Me.HashAsync(strClear, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub HashAsync(ByVal strClear As String, ByVal userState As Object)
            If (Me.HashOperationCompleted Is Nothing) Then
                Me.HashOperationCompleted = AddressOf Me.OnHashOperationCompleted
            End If
            Me.InvokeAsync("Hash", New Object() {strClear}, Me.HashOperationCompleted, userState)
        End Sub
        
        Private Sub OnHashOperationCompleted(ByVal arg As Object)
            If (Not (Me.HashCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent HashCompleted(Me, New HashCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://dev.tranact.com.org/GetCheckCodeText", RequestNamespace:="http://dev.tranact.com.org/", ResponseNamespace:="http://dev.tranact.com.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetCheckCodeText(ByVal strCode As String) As String
            Dim results() As Object = Me.Invoke("GetCheckCodeText", New Object() {strCode})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetCheckCodeTextAsync(ByVal strCode As String)
            Me.GetCheckCodeTextAsync(strCode, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetCheckCodeTextAsync(ByVal strCode As String, ByVal userState As Object)
            If (Me.GetCheckCodeTextOperationCompleted Is Nothing) Then
                Me.GetCheckCodeTextOperationCompleted = AddressOf Me.OnGetCheckCodeTextOperationCompleted
            End If
            Me.InvokeAsync("GetCheckCodeText", New Object() {strCode}, Me.GetCheckCodeTextOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetCheckCodeTextOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetCheckCodeTextCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetCheckCodeTextCompleted(Me, New GetCheckCodeTextCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://dev.tranact.com.org/GetRandomNum", RequestNamespace:="http://dev.tranact.com.org/", ResponseNamespace:="http://dev.tranact.com.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetRandomNum(ByVal numDigits As Integer, ByVal max As Integer) As Integer
            Dim results() As Object = Me.Invoke("GetRandomNum", New Object() {numDigits, max})
            Return CType(results(0),Integer)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetRandomNumAsync(ByVal numDigits As Integer, ByVal max As Integer)
            Me.GetRandomNumAsync(numDigits, max, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetRandomNumAsync(ByVal numDigits As Integer, ByVal max As Integer, ByVal userState As Object)
            If (Me.GetRandomNumOperationCompleted Is Nothing) Then
                Me.GetRandomNumOperationCompleted = AddressOf Me.OnGetRandomNumOperationCompleted
            End If
            Me.InvokeAsync("GetRandomNum", New Object() {numDigits, max}, Me.GetRandomNumOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetRandomNumOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetRandomNumCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetRandomNumCompleted(Me, New GetRandomNumCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://dev.tranact.com.org/UpdateCustomer", RequestNamespace:="http://dev.tranact.com.org/", ResponseNamespace:="http://dev.tranact.com.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Sub UpdateCustomer(ByVal Password As String, ByVal iCustID As Integer)
            Me.Invoke("UpdateCustomer", New Object() {Password, iCustID})
        End Sub
        
        '''<remarks/>
        Public Overloads Sub UpdateCustomerAsync(ByVal Password As String, ByVal iCustID As Integer)
            Me.UpdateCustomerAsync(Password, iCustID, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub UpdateCustomerAsync(ByVal Password As String, ByVal iCustID As Integer, ByVal userState As Object)
            If (Me.UpdateCustomerOperationCompleted Is Nothing) Then
                Me.UpdateCustomerOperationCompleted = AddressOf Me.OnUpdateCustomerOperationCompleted
            End If
            Me.InvokeAsync("UpdateCustomer", New Object() {Password, iCustID}, Me.UpdateCustomerOperationCompleted, userState)
        End Sub
        
        Private Sub OnUpdateCustomerOperationCompleted(ByVal arg As Object)
            If (Not (Me.UpdateCustomerCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent UpdateCustomerCompleted(Me, New System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://dev.tranact.com.org/CreateTransactionNum", RequestNamespace:="http://dev.tranact.com.org/", ResponseNamespace:="http://dev.tranact.com.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function CreateTransactionNum(ByVal iCustId As Integer, ByVal tran_type As String, ByVal sec_tran_type As String, ByVal iBlockID As Integer, ByVal iActID As Integer, ByVal mAmt As Decimal) As System.Xml.XmlNode
            Dim results() As Object = Me.Invoke("CreateTransactionNum", New Object() {iCustId, tran_type, sec_tran_type, iBlockID, iActID, mAmt})
            Return CType(results(0),System.Xml.XmlNode)
        End Function
        
        '''<remarks/>
        Public Overloads Sub CreateTransactionNumAsync(ByVal iCustId As Integer, ByVal tran_type As String, ByVal sec_tran_type As String, ByVal iBlockID As Integer, ByVal iActID As Integer, ByVal mAmt As Decimal)
            Me.CreateTransactionNumAsync(iCustId, tran_type, sec_tran_type, iBlockID, iActID, mAmt, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub CreateTransactionNumAsync(ByVal iCustId As Integer, ByVal tran_type As String, ByVal sec_tran_type As String, ByVal iBlockID As Integer, ByVal iActID As Integer, ByVal mAmt As Decimal, ByVal userState As Object)
            If (Me.CreateTransactionNumOperationCompleted Is Nothing) Then
                Me.CreateTransactionNumOperationCompleted = AddressOf Me.OnCreateTransactionNumOperationCompleted
            End If
            Me.InvokeAsync("CreateTransactionNum", New Object() {iCustId, tran_type, sec_tran_type, iBlockID, iActID, mAmt}, Me.CreateTransactionNumOperationCompleted, userState)
        End Sub
        
        Private Sub OnCreateTransactionNumOperationCompleted(ByVal arg As Object)
            If (Not (Me.CreateTransactionNumCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent CreateTransactionNumCompleted(Me, New CreateTransactionNumCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://dev.tranact.com.org/SaveEntityAccountType", RequestNamespace:="http://dev.tranact.com.org/", ResponseNamespace:="http://dev.tranact.com.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function SaveEntityAccountType(ByVal oEntActType As clsEntityAccountType) As Boolean
            Dim results() As Object = Me.Invoke("SaveEntityAccountType", New Object() {oEntActType})
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub SaveEntityAccountTypeAsync(ByVal oEntActType As clsEntityAccountType)
            Me.SaveEntityAccountTypeAsync(oEntActType, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub SaveEntityAccountTypeAsync(ByVal oEntActType As clsEntityAccountType, ByVal userState As Object)
            If (Me.SaveEntityAccountTypeOperationCompleted Is Nothing) Then
                Me.SaveEntityAccountTypeOperationCompleted = AddressOf Me.OnSaveEntityAccountTypeOperationCompleted
            End If
            Me.InvokeAsync("SaveEntityAccountType", New Object() {oEntActType}, Me.SaveEntityAccountTypeOperationCompleted, userState)
        End Sub
        
        Private Sub OnSaveEntityAccountTypeOperationCompleted(ByVal arg As Object)
            If (Not (Me.SaveEntityAccountTypeCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent SaveEntityAccountTypeCompleted(Me, New SaveEntityAccountTypeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://dev.tranact.com.org/GetEntityAccountType", RequestNamespace:="http://dev.tranact.com.org/", ResponseNamespace:="http://dev.tranact.com.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetEntityAccountType(ByRef oEntActType As clsEntityAccountType) As clsEntityAccountType
            Dim results() As Object = Me.Invoke("GetEntityAccountType", New Object() {oEntActType})
            oEntActType = CType(results(1),clsEntityAccountType)
            Return CType(results(0),clsEntityAccountType)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetEntityAccountTypeAsync(ByVal oEntActType As clsEntityAccountType)
            Me.GetEntityAccountTypeAsync(oEntActType, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetEntityAccountTypeAsync(ByVal oEntActType As clsEntityAccountType, ByVal userState As Object)
            If (Me.GetEntityAccountTypeOperationCompleted Is Nothing) Then
                Me.GetEntityAccountTypeOperationCompleted = AddressOf Me.OnGetEntityAccountTypeOperationCompleted
            End If
            Me.InvokeAsync("GetEntityAccountType", New Object() {oEntActType}, Me.GetEntityAccountTypeOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetEntityAccountTypeOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetEntityAccountTypeCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetEntityAccountTypeCompleted(Me, New GetEntityAccountTypeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://dev.tranact.com.org/SaveCompany", RequestNamespace:="http://dev.tranact.com.org/", ResponseNamespace:="http://dev.tranact.com.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function SaveCompany(ByVal oCompany As clsCompany) As Boolean
            Dim results() As Object = Me.Invoke("SaveCompany", New Object() {oCompany})
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub SaveCompanyAsync(ByVal oCompany As clsCompany)
            Me.SaveCompanyAsync(oCompany, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub SaveCompanyAsync(ByVal oCompany As clsCompany, ByVal userState As Object)
            If (Me.SaveCompanyOperationCompleted Is Nothing) Then
                Me.SaveCompanyOperationCompleted = AddressOf Me.OnSaveCompanyOperationCompleted
            End If
            Me.InvokeAsync("SaveCompany", New Object() {oCompany}, Me.SaveCompanyOperationCompleted, userState)
        End Sub
        
        Private Sub OnSaveCompanyOperationCompleted(ByVal arg As Object)
            If (Not (Me.SaveCompanyCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent SaveCompanyCompleted(Me, New SaveCompanyCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://dev.tranact.com.org/GetCompany", RequestNamespace:="http://dev.tranact.com.org/", ResponseNamespace:="http://dev.tranact.com.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetCompany(ByRef oCompany As clsCompany) As clsCompany
            Dim results() As Object = Me.Invoke("GetCompany", New Object() {oCompany})
            oCompany = CType(results(1),clsCompany)
            Return CType(results(0),clsCompany)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetCompanyAsync(ByVal oCompany As clsCompany)
            Me.GetCompanyAsync(oCompany, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetCompanyAsync(ByVal oCompany As clsCompany, ByVal userState As Object)
            If (Me.GetCompanyOperationCompleted Is Nothing) Then
                Me.GetCompanyOperationCompleted = AddressOf Me.OnGetCompanyOperationCompleted
            End If
            Me.InvokeAsync("GetCompany", New Object() {oCompany}, Me.GetCompanyOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetCompanyOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetCompanyCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetCompanyCompleted(Me, New GetCompanyCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://dev.tranact.com.org/GetCompanies", RequestNamespace:="http://dev.tranact.com.org/", ResponseNamespace:="http://dev.tranact.com.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetCompanies() As System.Data.DataSet
            Dim results() As Object = Me.Invoke("GetCompanies", New Object(-1) {})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetCompaniesAsync()
            Me.GetCompaniesAsync(Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetCompaniesAsync(ByVal userState As Object)
            If (Me.GetCompaniesOperationCompleted Is Nothing) Then
                Me.GetCompaniesOperationCompleted = AddressOf Me.OnGetCompaniesOperationCompleted
            End If
            Me.InvokeAsync("GetCompanies", New Object(-1) {}, Me.GetCompaniesOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetCompaniesOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetCompaniesCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetCompaniesCompleted(Me, New GetCompaniesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://dev.tranact.com.org/GetInactiveCompanies", RequestNamespace:="http://dev.tranact.com.org/", ResponseNamespace:="http://dev.tranact.com.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetInactiveCompanies() As System.Data.DataSet
            Dim results() As Object = Me.Invoke("GetInactiveCompanies", New Object(-1) {})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetInactiveCompaniesAsync()
            Me.GetInactiveCompaniesAsync(Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetInactiveCompaniesAsync(ByVal userState As Object)
            If (Me.GetInactiveCompaniesOperationCompleted Is Nothing) Then
                Me.GetInactiveCompaniesOperationCompleted = AddressOf Me.OnGetInactiveCompaniesOperationCompleted
            End If
            Me.InvokeAsync("GetInactiveCompanies", New Object(-1) {}, Me.GetInactiveCompaniesOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetInactiveCompaniesOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetInactiveCompaniesCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetInactiveCompaniesCompleted(Me, New GetInactiveCompaniesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://dev.tranact.com.org/GetEntities", RequestNamespace:="http://dev.tranact.com.org/", ResponseNamespace:="http://dev.tranact.com.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetEntities() As System.Data.DataSet
            Dim results() As Object = Me.Invoke("GetEntities", New Object(-1) {})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetEntitiesAsync()
            Me.GetEntitiesAsync(Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetEntitiesAsync(ByVal userState As Object)
            If (Me.GetEntitiesOperationCompleted Is Nothing) Then
                Me.GetEntitiesOperationCompleted = AddressOf Me.OnGetEntitiesOperationCompleted
            End If
            Me.InvokeAsync("GetEntities", New Object(-1) {}, Me.GetEntitiesOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetEntitiesOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetEntitiesCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetEntitiesCompleted(Me, New GetEntitiesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://dev.tranact.com.org/GetCompaniesByEntity", RequestNamespace:="http://dev.tranact.com.org/", ResponseNamespace:="http://dev.tranact.com.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetCompaniesByEntity(ByVal EntityID As Integer) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("GetCompaniesByEntity", New Object() {EntityID})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetCompaniesByEntityAsync(ByVal EntityID As Integer)
            Me.GetCompaniesByEntityAsync(EntityID, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetCompaniesByEntityAsync(ByVal EntityID As Integer, ByVal userState As Object)
            If (Me.GetCompaniesByEntityOperationCompleted Is Nothing) Then
                Me.GetCompaniesByEntityOperationCompleted = AddressOf Me.OnGetCompaniesByEntityOperationCompleted
            End If
            Me.InvokeAsync("GetCompaniesByEntity", New Object() {EntityID}, Me.GetCompaniesByEntityOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetCompaniesByEntityOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetCompaniesByEntityCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetCompaniesByEntityCompleted(Me, New GetCompaniesByEntityCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://dev.tranact.com.org/GetInActiveCompaniesByEntity", RequestNamespace:="http://dev.tranact.com.org/", ResponseNamespace:="http://dev.tranact.com.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetInActiveCompaniesByEntity(ByVal EntityID As Integer) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("GetInActiveCompaniesByEntity", New Object() {EntityID})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetInActiveCompaniesByEntityAsync(ByVal EntityID As Integer)
            Me.GetInActiveCompaniesByEntityAsync(EntityID, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetInActiveCompaniesByEntityAsync(ByVal EntityID As Integer, ByVal userState As Object)
            If (Me.GetInActiveCompaniesByEntityOperationCompleted Is Nothing) Then
                Me.GetInActiveCompaniesByEntityOperationCompleted = AddressOf Me.OnGetInActiveCompaniesByEntityOperationCompleted
            End If
            Me.InvokeAsync("GetInActiveCompaniesByEntity", New Object() {EntityID}, Me.GetInActiveCompaniesByEntityOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetInActiveCompaniesByEntityOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetInActiveCompaniesByEntityCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetInActiveCompaniesByEntityCompleted(Me, New GetInActiveCompaniesByEntityCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://dev.tranact.com.org/GetActInfo", RequestNamespace:="http://dev.tranact.com.org/", ResponseNamespace:="http://dev.tranact.com.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetActInfo(ByVal ActID As Integer) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("GetActInfo", New Object() {ActID})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetActInfoAsync(ByVal ActID As Integer)
            Me.GetActInfoAsync(ActID, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetActInfoAsync(ByVal ActID As Integer, ByVal userState As Object)
            If (Me.GetActInfoOperationCompleted Is Nothing) Then
                Me.GetActInfoOperationCompleted = AddressOf Me.OnGetActInfoOperationCompleted
            End If
            Me.InvokeAsync("GetActInfo", New Object() {ActID}, Me.GetActInfoOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetActInfoOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetActInfoCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetActInfoCompleted(Me, New GetActInfoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://dev.tranact.com.org/MarkAllCardsHot", RequestNamespace:="http://dev.tranact.com.org/", ResponseNamespace:="http://dev.tranact.com.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function MarkAllCardsHot(ByVal NewPan As String, ByVal iWKSID As Integer, ByVal iCustID As Integer, ByVal PhotoID As String, ByVal DOB As Date, ByVal State As String, ByVal ProviderID As Integer) As String
            Dim results() As Object = Me.Invoke("MarkAllCardsHot", New Object() {NewPan, iWKSID, iCustID, PhotoID, DOB, State, ProviderID})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub MarkAllCardsHotAsync(ByVal NewPan As String, ByVal iWKSID As Integer, ByVal iCustID As Integer, ByVal PhotoID As String, ByVal DOB As Date, ByVal State As String, ByVal ProviderID As Integer)
            Me.MarkAllCardsHotAsync(NewPan, iWKSID, iCustID, PhotoID, DOB, State, ProviderID, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub MarkAllCardsHotAsync(ByVal NewPan As String, ByVal iWKSID As Integer, ByVal iCustID As Integer, ByVal PhotoID As String, ByVal DOB As Date, ByVal State As String, ByVal ProviderID As Integer, ByVal userState As Object)
            If (Me.MarkAllCardsHotOperationCompleted Is Nothing) Then
                Me.MarkAllCardsHotOperationCompleted = AddressOf Me.OnMarkAllCardsHotOperationCompleted
            End If
            Me.InvokeAsync("MarkAllCardsHot", New Object() {NewPan, iWKSID, iCustID, PhotoID, DOB, State, ProviderID}, Me.MarkAllCardsHotOperationCompleted, userState)
        End Sub
        
        Private Sub OnMarkAllCardsHotOperationCompleted(ByVal arg As Object)
            If (Not (Me.MarkAllCardsHotCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent MarkAllCardsHotCompleted(Me, New MarkAllCardsHotCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://dev.tranact.com.org/MarkCardHot", RequestNamespace:="http://dev.tranact.com.org/", ResponseNamespace:="http://dev.tranact.com.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function MarkCardHot(ByVal NewPan As String, ByVal iWKSID As Integer, ByVal iCustID As Integer, ByVal PhotoID As String, ByVal DOB As Date, ByVal State As String, ByVal ProviderID As Integer) As String
            Dim results() As Object = Me.Invoke("MarkCardHot", New Object() {NewPan, iWKSID, iCustID, PhotoID, DOB, State, ProviderID})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub MarkCardHotAsync(ByVal NewPan As String, ByVal iWKSID As Integer, ByVal iCustID As Integer, ByVal PhotoID As String, ByVal DOB As Date, ByVal State As String, ByVal ProviderID As Integer)
            Me.MarkCardHotAsync(NewPan, iWKSID, iCustID, PhotoID, DOB, State, ProviderID, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub MarkCardHotAsync(ByVal NewPan As String, ByVal iWKSID As Integer, ByVal iCustID As Integer, ByVal PhotoID As String, ByVal DOB As Date, ByVal State As String, ByVal ProviderID As Integer, ByVal userState As Object)
            If (Me.MarkCardHotOperationCompleted Is Nothing) Then
                Me.MarkCardHotOperationCompleted = AddressOf Me.OnMarkCardHotOperationCompleted
            End If
            Me.InvokeAsync("MarkCardHot", New Object() {NewPan, iWKSID, iCustID, PhotoID, DOB, State, ProviderID}, Me.MarkCardHotOperationCompleted, userState)
        End Sub
        
        Private Sub OnMarkCardHotOperationCompleted(ByVal arg As Object)
            If (Not (Me.MarkCardHotCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent MarkCardHotCompleted(Me, New MarkCardHotCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://dev.tranact.com.org/COMMS", RequestNamespace:="http://dev.tranact.com.org/", ResponseNamespace:="http://dev.tranact.com.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function COMMS(ByVal iCustID As Integer, ByVal strSeg() As clsLabel) As System.Xml.XmlElement
            Dim results() As Object = Me.Invoke("COMMS", New Object() {iCustID, strSeg})
            Return CType(results(0),System.Xml.XmlElement)
        End Function
        
        '''<remarks/>
        Public Overloads Sub COMMSAsync(ByVal iCustID As Integer, ByVal strSeg() As clsLabel)
            Me.COMMSAsync(iCustID, strSeg, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub COMMSAsync(ByVal iCustID As Integer, ByVal strSeg() As clsLabel, ByVal userState As Object)
            If (Me.COMMSOperationCompleted Is Nothing) Then
                Me.COMMSOperationCompleted = AddressOf Me.OnCOMMSOperationCompleted
            End If
            Me.InvokeAsync("COMMS", New Object() {iCustID, strSeg}, Me.COMMSOperationCompleted, userState)
        End Sub
        
        Private Sub OnCOMMSOperationCompleted(ByVal arg As Object)
            If (Not (Me.COMMSCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent COMMSCompleted(Me, New COMMSCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://dev.tranact.com.org/UpdateCustomerAddress", RequestNamespace:="http://dev.tranact.com.org/", ResponseNamespace:="http://dev.tranact.com.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function UpdateCustomerAddress(ByVal strPhotoID As String, ByVal dDOB As Date, ByVal iCustID As Integer, ByVal Addr1 As String, ByVal Addr2 As String, ByVal City As String, ByVal State As String, ByVal Zip As String, ByVal PhoneHome As String, ByVal PhoneWork As String, ByVal iWksID As Integer) As System.Xml.XmlElement
            Dim results() As Object = Me.Invoke("UpdateCustomerAddress", New Object() {strPhotoID, dDOB, iCustID, Addr1, Addr2, City, State, Zip, PhoneHome, PhoneWork, iWksID})
            Return CType(results(0),System.Xml.XmlElement)
        End Function
        
        '''<remarks/>
        Public Overloads Sub UpdateCustomerAddressAsync(ByVal strPhotoID As String, ByVal dDOB As Date, ByVal iCustID As Integer, ByVal Addr1 As String, ByVal Addr2 As String, ByVal City As String, ByVal State As String, ByVal Zip As String, ByVal PhoneHome As String, ByVal PhoneWork As String, ByVal iWksID As Integer)
            Me.UpdateCustomerAddressAsync(strPhotoID, dDOB, iCustID, Addr1, Addr2, City, State, Zip, PhoneHome, PhoneWork, iWksID, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub UpdateCustomerAddressAsync(ByVal strPhotoID As String, ByVal dDOB As Date, ByVal iCustID As Integer, ByVal Addr1 As String, ByVal Addr2 As String, ByVal City As String, ByVal State As String, ByVal Zip As String, ByVal PhoneHome As String, ByVal PhoneWork As String, ByVal iWksID As Integer, ByVal userState As Object)
            If (Me.UpdateCustomerAddressOperationCompleted Is Nothing) Then
                Me.UpdateCustomerAddressOperationCompleted = AddressOf Me.OnUpdateCustomerAddressOperationCompleted
            End If
            Me.InvokeAsync("UpdateCustomerAddress", New Object() {strPhotoID, dDOB, iCustID, Addr1, Addr2, City, State, Zip, PhoneHome, PhoneWork, iWksID}, Me.UpdateCustomerAddressOperationCompleted, userState)
        End Sub
        
        Private Sub OnUpdateCustomerAddressOperationCompleted(ByVal arg As Object)
            If (Not (Me.UpdateCustomerAddressCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent UpdateCustomerAddressCompleted(Me, New UpdateCustomerAddressCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://dev.tranact.com.org/BuildCustomerMessage", RequestNamespace:="http://dev.tranact.com.org/", ResponseNamespace:="http://dev.tranact.com.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function BuildCustomerMessage(ByVal strSegs() As clsLabel, ByVal iLangCode As String) As String
            Dim results() As Object = Me.Invoke("BuildCustomerMessage", New Object() {strSegs, iLangCode})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub BuildCustomerMessageAsync(ByVal strSegs() As clsLabel, ByVal iLangCode As String)
            Me.BuildCustomerMessageAsync(strSegs, iLangCode, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub BuildCustomerMessageAsync(ByVal strSegs() As clsLabel, ByVal iLangCode As String, ByVal userState As Object)
            If (Me.BuildCustomerMessageOperationCompleted Is Nothing) Then
                Me.BuildCustomerMessageOperationCompleted = AddressOf Me.OnBuildCustomerMessageOperationCompleted
            End If
            Me.InvokeAsync("BuildCustomerMessage", New Object() {strSegs, iLangCode}, Me.BuildCustomerMessageOperationCompleted, userState)
        End Sub
        
        Private Sub OnBuildCustomerMessageOperationCompleted(ByVal arg As Object)
            If (Not (Me.BuildCustomerMessageCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent BuildCustomerMessageCompleted(Me, New BuildCustomerMessageCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://dev.tranact.com.org/decrypt", RequestNamespace:="http://dev.tranact.com.org/", ResponseNamespace:="http://dev.tranact.com.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function decrypt(ByVal strEncrypted As String) As String
            Dim results() As Object = Me.Invoke("decrypt", New Object() {strEncrypted})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub decryptAsync(ByVal strEncrypted As String)
            Me.decryptAsync(strEncrypted, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub decryptAsync(ByVal strEncrypted As String, ByVal userState As Object)
            If (Me.decryptOperationCompleted Is Nothing) Then
                Me.decryptOperationCompleted = AddressOf Me.OndecryptOperationCompleted
            End If
            Me.InvokeAsync("decrypt", New Object() {strEncrypted}, Me.decryptOperationCompleted, userState)
        End Sub
        
        Private Sub OndecryptOperationCompleted(ByVal arg As Object)
            If (Not (Me.decryptCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent decryptCompleted(Me, New decryptCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://dev.tranact.com.org/CreatePasswordHash", RequestNamespace:="http://dev.tranact.com.org/", ResponseNamespace:="http://dev.tranact.com.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function CreatePasswordHash(ByVal strPass As String, ByVal strSalt As String) As String
            Dim results() As Object = Me.Invoke("CreatePasswordHash", New Object() {strPass, strSalt})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub CreatePasswordHashAsync(ByVal strPass As String, ByVal strSalt As String)
            Me.CreatePasswordHashAsync(strPass, strSalt, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub CreatePasswordHashAsync(ByVal strPass As String, ByVal strSalt As String, ByVal userState As Object)
            If (Me.CreatePasswordHashOperationCompleted Is Nothing) Then
                Me.CreatePasswordHashOperationCompleted = AddressOf Me.OnCreatePasswordHashOperationCompleted
            End If
            Me.InvokeAsync("CreatePasswordHash", New Object() {strPass, strSalt}, Me.CreatePasswordHashOperationCompleted, userState)
        End Sub
        
        Private Sub OnCreatePasswordHashOperationCompleted(ByVal arg As Object)
            If (Not (Me.CreatePasswordHashCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent CreatePasswordHashCompleted(Me, New CreatePasswordHashCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://dev.tranact.com.org/RetrieveCompanyNumberForPan", RequestNamespace:="http://dev.tranact.com.org/", ResponseNamespace:="http://dev.tranact.com.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function RetrieveCompanyNumberForPan(ByVal Bin As String, ByVal PanLastFour As String) As Integer
            Dim results() As Object = Me.Invoke("RetrieveCompanyNumberForPan", New Object() {Bin, PanLastFour})
            Return CType(results(0),Integer)
        End Function
        
        '''<remarks/>
        Public Overloads Sub RetrieveCompanyNumberForPanAsync(ByVal Bin As String, ByVal PanLastFour As String)
            Me.RetrieveCompanyNumberForPanAsync(Bin, PanLastFour, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub RetrieveCompanyNumberForPanAsync(ByVal Bin As String, ByVal PanLastFour As String, ByVal userState As Object)
            If (Me.RetrieveCompanyNumberForPanOperationCompleted Is Nothing) Then
                Me.RetrieveCompanyNumberForPanOperationCompleted = AddressOf Me.OnRetrieveCompanyNumberForPanOperationCompleted
            End If
            Me.InvokeAsync("RetrieveCompanyNumberForPan", New Object() {Bin, PanLastFour}, Me.RetrieveCompanyNumberForPanOperationCompleted, userState)
        End Sub
        
        Private Sub OnRetrieveCompanyNumberForPanOperationCompleted(ByVal arg As Object)
            If (Not (Me.RetrieveCompanyNumberForPanCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent RetrieveCompanyNumberForPanCompleted(Me, New RetrieveCompanyNumberForPanCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        Public Shadows Sub CancelAsync(ByVal userState As Object)
            MyBase.CancelAsync(userState)
        End Sub
        
        Private Function IsLocalFileSystemWebService(ByVal url As String) As Boolean
            If ((url Is Nothing)  _
                        OrElse (url Is String.Empty)) Then
                Return false
            End If
            Dim wsUri As System.Uri = New System.Uri(url)
            If ((wsUri.Port >= 1024)  _
                        AndAlso (String.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) = 0)) Then
                Return true
            End If
            Return false
        End Function
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.233"),  _
     System.SerializableAttribute(),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code"),  _
     System.Xml.Serialization.XmlTypeAttribute([Namespace]:="http://dev.tranact.com.org/")>  _
    Partial Public Class clsListItem
        
        Private textField As String
        
        Private valueField As String
        
        '''<remarks/>
        Public Property Text() As String
            Get
                Return Me.textField
            End Get
            Set
                Me.textField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property Value() As String
            Get
                Return Me.valueField
            End Get
            Set
                Me.valueField = value
            End Set
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.233"),  _
     System.SerializableAttribute(),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code"),  _
     System.Xml.Serialization.XmlTypeAttribute([Namespace]:="http://dev.tranact.com.org/")>  _
    Partial Public Class clsTranRow
        
        Private oListField() As clsTranRow
        
        Private plusLinkPostBackField As String
        
        Private blockDetailsField As Object
        
        Private tranIDField As Integer
        
        Private tran_statusField As String
        
        Private cashBalanceField As Double
        
        Private transactionTypeDescriptionField As String
        
        Private transactionTypeIconField As String
        
        Private tran_typeField As String
        
        Private actIDField As Integer
        
        Private short_descField As String
        
        Private statusIconField As String
        
        Private buttonTextField As String
        
        Private pANField As String
        
        Private actTypeIDField As Integer
        
        Private entityIDField As Integer
        
        Private ableToDeleteField As Integer
        
        Private actNbrField As String
        
        Private date_timeField As Date
        
        Private blockIDField As Integer
        
        Private descriptionField As String
        
        Private runBalanceField As Decimal
        
        Private custIDField As Integer
        
        Private act2NumberField As String
        
        Private blockTotalField As Decimal
        
        Private feeField As Decimal
        
        Private amountReqField As Decimal
        
        '''<remarks/>
        Public Property oList() As clsTranRow()
            Get
                Return Me.oListField
            End Get
            Set
                Me.oListField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property PlusLinkPostBack() As String
            Get
                Return Me.plusLinkPostBackField
            End Get
            Set
                Me.plusLinkPostBackField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property BlockDetails() As Object
            Get
                Return Me.blockDetailsField
            End Get
            Set
                Me.blockDetailsField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property TranID() As Integer
            Get
                Return Me.tranIDField
            End Get
            Set
                Me.tranIDField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property tran_status() As String
            Get
                Return Me.tran_statusField
            End Get
            Set
                Me.tran_statusField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property cashBalance() As Double
            Get
                Return Me.cashBalanceField
            End Get
            Set
                Me.cashBalanceField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property TransactionTypeDescription() As String
            Get
                Return Me.transactionTypeDescriptionField
            End Get
            Set
                Me.transactionTypeDescriptionField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property TransactionTypeIcon() As String
            Get
                Return Me.transactionTypeIconField
            End Get
            Set
                Me.transactionTypeIconField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property tran_type() As String
            Get
                Return Me.tran_typeField
            End Get
            Set
                Me.tran_typeField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property ActID() As Integer
            Get
                Return Me.actIDField
            End Get
            Set
                Me.actIDField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property short_desc() As String
            Get
                Return Me.short_descField
            End Get
            Set
                Me.short_descField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property StatusIcon() As String
            Get
                Return Me.statusIconField
            End Get
            Set
                Me.statusIconField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property ButtonText() As String
            Get
                Return Me.buttonTextField
            End Get
            Set
                Me.buttonTextField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property PAN() As String
            Get
                Return Me.pANField
            End Get
            Set
                Me.pANField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property ActTypeID() As Integer
            Get
                Return Me.actTypeIDField
            End Get
            Set
                Me.actTypeIDField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property EntityID() As Integer
            Get
                Return Me.entityIDField
            End Get
            Set
                Me.entityIDField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property AbleToDelete() As Integer
            Get
                Return Me.ableToDeleteField
            End Get
            Set
                Me.ableToDeleteField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property ActNbr() As String
            Get
                Return Me.actNbrField
            End Get
            Set
                Me.actNbrField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property date_time() As Date
            Get
                Return Me.date_timeField
            End Get
            Set
                Me.date_timeField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property BlockID() As Integer
            Get
                Return Me.blockIDField
            End Get
            Set
                Me.blockIDField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property Description() As String
            Get
                Return Me.descriptionField
            End Get
            Set
                Me.descriptionField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property RunBalance() As Decimal
            Get
                Return Me.runBalanceField
            End Get
            Set
                Me.runBalanceField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property CustID() As Integer
            Get
                Return Me.custIDField
            End Get
            Set
                Me.custIDField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property Act2Number() As String
            Get
                Return Me.act2NumberField
            End Get
            Set
                Me.act2NumberField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property BlockTotal() As Decimal
            Get
                Return Me.blockTotalField
            End Get
            Set
                Me.blockTotalField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property Fee() As Decimal
            Get
                Return Me.feeField
            End Get
            Set
                Me.feeField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property AmountReq() As Decimal
            Get
                Return Me.amountReqField
            End Get
            Set
                Me.amountReqField = value
            End Set
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.233"),  _
     System.SerializableAttribute(),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code"),  _
     System.Xml.Serialization.XmlTypeAttribute([Namespace]:="http://dev.tranact.com.org/")>  _
    Partial Public Class clsBlockDetails
        
        Private oTranRowField() As clsTranRow
        
        Private oFundActField() As clsTranRow
        
        Private oHeaderRowField() As clsTranRow
        
        Private mBlockTotalField As Decimal
        
        Private mPaymentsTotalField As Decimal
        
        Private mFeeTotalField As Decimal
        
        Private dBlockDateField As Date
        
        '''<remarks/>
        Public Property oTranRow() As clsTranRow()
            Get
                Return Me.oTranRowField
            End Get
            Set
                Me.oTranRowField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property oFundAct() As clsTranRow()
            Get
                Return Me.oFundActField
            End Get
            Set
                Me.oFundActField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property oHeaderRow() As clsTranRow()
            Get
                Return Me.oHeaderRowField
            End Get
            Set
                Me.oHeaderRowField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property mBlockTotal() As Decimal
            Get
                Return Me.mBlockTotalField
            End Get
            Set
                Me.mBlockTotalField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property mPaymentsTotal() As Decimal
            Get
                Return Me.mPaymentsTotalField
            End Get
            Set
                Me.mPaymentsTotalField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property mFeeTotal() As Decimal
            Get
                Return Me.mFeeTotalField
            End Get
            Set
                Me.mFeeTotalField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property dBlockDate() As Date
            Get
                Return Me.dBlockDateField
            End Get
            Set
                Me.dBlockDateField = value
            End Set
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.233"),  _
     System.SerializableAttribute(),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code"),  _
     System.Xml.Serialization.XmlTypeAttribute([Namespace]:="http://dev.tranact.com.org/")>  _
    Partial Public Class clsEntityAccountType
        
        Private entityIDField As Integer
        
        Private accountTypeIDField As Integer
        
        Private routingNbrField As String
        
        Private accountNbrField As String
        
        Private bankNameField As String
        
        Private bankAddressL1Field As String
        
        Private bankAddressL2Field As String
        
        Private bankCityField As String
        
        Private bankStateField As String
        
        Private bankZipField As String
        
        '''<remarks/>
        Public Property EntityID() As Integer
            Get
                Return Me.entityIDField
            End Get
            Set
                Me.entityIDField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property AccountTypeID() As Integer
            Get
                Return Me.accountTypeIDField
            End Get
            Set
                Me.accountTypeIDField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property RoutingNbr() As String
            Get
                Return Me.routingNbrField
            End Get
            Set
                Me.routingNbrField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property AccountNbr() As String
            Get
                Return Me.accountNbrField
            End Get
            Set
                Me.accountNbrField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property BankName() As String
            Get
                Return Me.bankNameField
            End Get
            Set
                Me.bankNameField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property BankAddressL1() As String
            Get
                Return Me.bankAddressL1Field
            End Get
            Set
                Me.bankAddressL1Field = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property BankAddressL2() As String
            Get
                Return Me.bankAddressL2Field
            End Get
            Set
                Me.bankAddressL2Field = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property BankCity() As String
            Get
                Return Me.bankCityField
            End Get
            Set
                Me.bankCityField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property BankState() As String
            Get
                Return Me.bankStateField
            End Get
            Set
                Me.bankStateField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property BankZip() As String
            Get
                Return Me.bankZipField
            End Get
            Set
                Me.bankZipField = value
            End Set
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.233"),  _
     System.SerializableAttribute(),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code"),  _
     System.Xml.Serialization.XmlTypeAttribute([Namespace]:="http://dev.tranact.com.org/")>  _
    Partial Public Class clsCompany
        
        Private companyNumberField As Integer
        
        Private companyNameField As String
        
        Private entityIDField As Integer
        
        Private hMActIDField As Integer
        
        Private tierField As Integer
        
        Private entityBKField As Boolean
        
        Private entityATField As Boolean
        
        Private entityUSField As Boolean
        
        Private entityFNField As Boolean
        
        Private activeField As Boolean
        
        Private groupIDField As Integer
        
        '''<remarks/>
        Public Property CompanyNumber() As Integer
            Get
                Return Me.companyNumberField
            End Get
            Set
                Me.companyNumberField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property CompanyName() As String
            Get
                Return Me.companyNameField
            End Get
            Set
                Me.companyNameField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property EntityID() As Integer
            Get
                Return Me.entityIDField
            End Get
            Set
                Me.entityIDField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property HMActID() As Integer
            Get
                Return Me.hMActIDField
            End Get
            Set
                Me.hMActIDField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property Tier() As Integer
            Get
                Return Me.tierField
            End Get
            Set
                Me.tierField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property EntityBK() As Boolean
            Get
                Return Me.entityBKField
            End Get
            Set
                Me.entityBKField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property EntityAT() As Boolean
            Get
                Return Me.entityATField
            End Get
            Set
                Me.entityATField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property EntityUS() As Boolean
            Get
                Return Me.entityUSField
            End Get
            Set
                Me.entityUSField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property EntityFN() As Boolean
            Get
                Return Me.entityFNField
            End Get
            Set
                Me.entityFNField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property Active() As Boolean
            Get
                Return Me.activeField
            End Get
            Set
                Me.activeField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property GroupID() As Integer
            Get
                Return Me.groupIDField
            End Get
            Set
                Me.groupIDField = value
            End Set
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.233"),  _
     System.SerializableAttribute(),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code"),  _
     System.Xml.Serialization.XmlTypeAttribute([Namespace]:="http://dev.tranact.com.org/")>  _
    Partial Public Class clsEntity
        
        Private entityNameField As String
        
        Private entityIDField As Integer
        
        '''<remarks/>
        Public Property EntityName() As String
            Get
                Return Me.entityNameField
            End Get
            Set
                Me.entityNameField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property EntityID() As Integer
            Get
                Return Me.entityIDField
            End Get
            Set
                Me.entityIDField = value
            End Set
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.233"),  _
     System.SerializableAttribute(),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code"),  _
     System.Xml.Serialization.XmlTypeAttribute([Namespace]:="http://dev.tranact.com.org/")>  _
    Partial Public Class clsLabel
        
        Private strLabelField As String
        
        Private iTranslateField As Integer
        
        '''<remarks/>
        Public Property strLabel() As String
            Get
                Return Me.strLabelField
            End Get
            Set
                Me.strLabelField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property iTranslate() As Integer
            Get
                Return Me.iTranslateField
            End Get
            Set
                Me.iTranslateField = value
            End Set
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub GetErrorDataCompletedEventHandler(ByVal sender As Object, ByVal e As GetErrorDataCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetErrorDataCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Xml.XmlElement
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Xml.XmlElement)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub GetRegistrationDataFromPanCompletedEventHandler(ByVal sender As Object, ByVal e As GetRegistrationDataFromPanCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetRegistrationDataFromPanCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Xml.XmlElement
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Xml.XmlElement)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub GetCustomerDataFromPanCompletedEventHandler(ByVal sender As Object, ByVal e As GetCustomerDataFromPanCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetCustomerDataFromPanCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Xml.XmlElement
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Xml.XmlElement)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub HelloWorldCompletedEventHandler(ByVal sender As Object, ByVal e As HelloWorldCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class HelloWorldCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub FillLanguagesCompletedEventHandler(ByVal sender As Object, ByVal e As FillLanguagesCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class FillLanguagesCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Object()
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Object())
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub ValidateBinCompletedEventHandler(ByVal sender As Object, ByVal e As ValidateBinCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class ValidateBinCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub GetCurrentCaseNumCompletedEventHandler(ByVal sender As Object, ByVal e As GetCurrentCaseNumCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetCurrentCaseNumCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Object
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Object)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub GetTestDataCompletedEventHandler(ByVal sender As Object, ByVal e As GetTestDataCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetTestDataCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Object
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Object)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub InsRegReviewCompletedEventHandler(ByVal sender As Object, ByVal e As InsRegReviewCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class InsRegReviewCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Integer
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Integer)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub UpdateRegTestDataCompletedEventHandler(ByVal sender As Object, ByVal e As System.ComponentModel.AsyncCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub QueryCheckCodesCompletedEventHandler(ByVal sender As Object, ByVal e As QueryCheckCodesCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class QueryCheckCodesCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub UpdateRegReviewCompletedEventHandler(ByVal sender As Object, ByVal e As UpdateRegReviewCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class UpdateRegReviewCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property strFirst() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strlast() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),String)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strDOB() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub UpdateCheckReviewCompletedEventHandler(ByVal sender As Object, ByVal e As System.ComponentModel.AsyncCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub GetCheckCaseCodeCompletedEventHandler(ByVal sender As Object, ByVal e As GetCheckCaseCodeCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetCheckCaseCodeCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub UpdateCaseNumCompletedEventHandler(ByVal sender As Object, ByVal e As System.ComponentModel.AsyncCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub DropRegTestDataCompletedEventHandler(ByVal sender As Object, ByVal e As System.ComponentModel.AsyncCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub InsChecksCompletedEventHandler(ByVal sender As Object, ByVal e As System.ComponentModel.AsyncCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub SaveImageCompletedEventHandler(ByVal sender As Object, ByVal e As SaveImageCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class SaveImageCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Xml.XmlElement
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Xml.XmlElement)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property iTranID() As Integer
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),Integer)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property strPan() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub GetImageCompletedEventHandler(ByVal sender As Object, ByVal e As GetImageCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetImageCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Byte()
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Byte())
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property iBlockID() As Integer
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),Integer)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub DerivePasswordBytesCompletedEventHandler(ByVal sender As Object, ByVal e As DerivePasswordBytesCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class DerivePasswordBytesCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Byte()
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Byte())
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub GetWorkstationsCompletedEventHandler(ByVal sender As Object, ByVal e As GetWorkstationsCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetWorkstationsCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Object()
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Object())
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub GetWorkstationIDCompletedEventHandler(ByVal sender As Object, ByVal e As GetWorkstationIDCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetWorkstationIDCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Integer
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Integer)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub PrepareTestDataCompletedEventHandler(ByVal sender As Object, ByVal e As System.ComponentModel.AsyncCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub EncryptCompletedEventHandler(ByVal sender As Object, ByVal e As EncryptCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class EncryptCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub GetKioskSettingsCompletedEventHandler(ByVal sender As Object, ByVal e As GetKioskSettingsCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetKioskSettingsCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub GetLangNameCompletedEventHandler(ByVal sender As Object, ByVal e As GetLangNameCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetLangNameCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub GetTranslationCompletedEventHandler(ByVal sender As Object, ByVal e As GetTranslationCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetTranslationCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub GetLangIDCompletedEventHandler(ByVal sender As Object, ByVal e As GetLangIDCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetLangIDCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Integer
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Integer)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub GetCustomerDataFromScanCompletedEventHandler(ByVal sender As Object, ByVal e As GetCustomerDataFromScanCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetCustomerDataFromScanCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Xml.XmlNode
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Xml.XmlNode)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub GetCheckDataCompletedEventHandler(ByVal sender As Object, ByVal e As GetCheckDataCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetCheckDataCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Xml.XmlElement
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Xml.XmlElement)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub GetCompaniesListCompletedEventHandler(ByVal sender As Object, ByVal e As GetCompaniesListCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetCompaniesListCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As clsCompany()
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),clsCompany())
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub HasCheckBeenReviewedCompletedEventHandler(ByVal sender As Object, ByVal e As HasCheckBeenReviewedCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class HasCheckBeenReviewedCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Xml.XmlNode
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Xml.XmlNode)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub GetRandomNumberCompletedEventHandler(ByVal sender As Object, ByVal e As GetRandomNumberCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetRandomNumberCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Integer
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Integer)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub GetCompanyDataCompletedEventHandler(ByVal sender As Object, ByVal e As GetCompanyDataCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetCompanyDataCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Xml.XmlElement
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Xml.XmlElement)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub GetActiveAccountsCompletedEventHandler(ByVal sender As Object, ByVal e As GetActiveAccountsCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetActiveAccountsCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub GetHeldEZCashTransCompletedEventHandler(ByVal sender As Object, ByVal e As GetHeldEZCashTransCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetHeldEZCashTransCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub GetAllTransactionsByBlockCompletedEventHandler(ByVal sender As Object, ByVal e As GetAllTransactionsByBlockCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetAllTransactionsByBlockCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As clsBlockDetails
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),clsBlockDetails)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub GetEZCashAccountsCompletedEventHandler(ByVal sender As Object, ByVal e As GetEZCashAccountsCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetEZCashAccountsCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub GetFeeWebCompsCompletedEventHandler(ByVal sender As Object, ByVal e As GetFeeWebCompsCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetFeeWebCompsCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub GetEZCashDepositAccountsCompletedEventHandler(ByVal sender As Object, ByVal e As GetEZCashDepositAccountsCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetEZCashDepositAccountsCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub GetEZCashInactiveAccountsCompletedEventHandler(ByVal sender As Object, ByVal e As GetEZCashInactiveAccountsCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetEZCashInactiveAccountsCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub GetAllTransactionsDSCompletedEventHandler(ByVal sender As Object, ByVal e As GetAllTransactionsDSCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetAllTransactionsDSCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As clsTranRow()
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),clsTranRow())
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub GetAllTransactionsByAcctCompletedEventHandler(ByVal sender As Object, ByVal e As GetAllTransactionsByAcctCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetAllTransactionsByAcctCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As clsTranRow()
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),clsTranRow())
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub GetEZCashTransactionsCompletedEventHandler(ByVal sender As Object, ByVal e As GetEZCashTransactionsCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetEZCashTransactionsCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub IFX_GetTransactionByTranIDCompletedEventHandler(ByVal sender As Object, ByVal e As IFX_GetTransactionByTranIDCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class IFX_GetTransactionByTranIDCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub GetEZCashTransactionsByBlockIDCompletedEventHandler(ByVal sender As Object, ByVal e As GetEZCashTransactionsByBlockIDCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetEZCashTransactionsByBlockIDCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub GetIFXTransactionsByBlockIDAndCustIDCompletedEventHandler(ByVal sender As Object, ByVal e As GetIFXTransactionsByBlockIDAndCustIDCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetIFXTransactionsByBlockIDAndCustIDCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub GetSystemSettingsCompletedEventHandler(ByVal sender As Object, ByVal e As GetSystemSettingsCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetSystemSettingsCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub GetEZCashTransactionsByAcctIDCompletedEventHandler(ByVal sender As Object, ByVal e As GetEZCashTransactionsByAcctIDCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetEZCashTransactionsByAcctIDCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub SaveCustomerCardCompletedEventHandler(ByVal sender As Object, ByVal e As SaveCustomerCardCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class SaveCustomerCardCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Integer
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Integer)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub GetCustomerDataFromIDCompletedEventHandler(ByVal sender As Object, ByVal e As GetCustomerDataFromIDCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetCustomerDataFromIDCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Xml.XmlNode
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Xml.XmlNode)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub PostLostCardCompletedEventHandler(ByVal sender As Object, ByVal e As PostLostCardCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class PostLostCardCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Xml.XmlNode
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Xml.XmlNode)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub TestCompletedEventHandler(ByVal sender As Object, ByVal e As TestCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class TestCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Xml.XmlNode
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Xml.XmlNode)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub HashCompletedEventHandler(ByVal sender As Object, ByVal e As HashCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class HashCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub GetCheckCodeTextCompletedEventHandler(ByVal sender As Object, ByVal e As GetCheckCodeTextCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetCheckCodeTextCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub GetRandomNumCompletedEventHandler(ByVal sender As Object, ByVal e As GetRandomNumCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetRandomNumCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Integer
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Integer)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub UpdateCustomerCompletedEventHandler(ByVal sender As Object, ByVal e As System.ComponentModel.AsyncCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub CreateTransactionNumCompletedEventHandler(ByVal sender As Object, ByVal e As CreateTransactionNumCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class CreateTransactionNumCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Xml.XmlNode
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Xml.XmlNode)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub SaveEntityAccountTypeCompletedEventHandler(ByVal sender As Object, ByVal e As SaveEntityAccountTypeCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class SaveEntityAccountTypeCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub GetEntityAccountTypeCompletedEventHandler(ByVal sender As Object, ByVal e As GetEntityAccountTypeCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetEntityAccountTypeCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As clsEntityAccountType
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),clsEntityAccountType)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property oEntActType() As clsEntityAccountType
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),clsEntityAccountType)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub SaveCompanyCompletedEventHandler(ByVal sender As Object, ByVal e As SaveCompanyCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class SaveCompanyCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub GetCompanyCompletedEventHandler(ByVal sender As Object, ByVal e As GetCompanyCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetCompanyCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As clsCompany
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),clsCompany)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property oCompany() As clsCompany
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),clsCompany)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub GetCompaniesCompletedEventHandler(ByVal sender As Object, ByVal e As GetCompaniesCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetCompaniesCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub GetInactiveCompaniesCompletedEventHandler(ByVal sender As Object, ByVal e As GetInactiveCompaniesCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetInactiveCompaniesCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub GetEntitiesCompletedEventHandler(ByVal sender As Object, ByVal e As GetEntitiesCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetEntitiesCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub GetCompaniesByEntityCompletedEventHandler(ByVal sender As Object, ByVal e As GetCompaniesByEntityCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetCompaniesByEntityCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub GetInActiveCompaniesByEntityCompletedEventHandler(ByVal sender As Object, ByVal e As GetInActiveCompaniesByEntityCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetInActiveCompaniesByEntityCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub GetActInfoCompletedEventHandler(ByVal sender As Object, ByVal e As GetActInfoCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetActInfoCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub MarkAllCardsHotCompletedEventHandler(ByVal sender As Object, ByVal e As MarkAllCardsHotCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class MarkAllCardsHotCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub MarkCardHotCompletedEventHandler(ByVal sender As Object, ByVal e As MarkCardHotCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class MarkCardHotCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub COMMSCompletedEventHandler(ByVal sender As Object, ByVal e As COMMSCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class COMMSCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Xml.XmlElement
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Xml.XmlElement)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub UpdateCustomerAddressCompletedEventHandler(ByVal sender As Object, ByVal e As UpdateCustomerAddressCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class UpdateCustomerAddressCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Xml.XmlElement
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Xml.XmlElement)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub BuildCustomerMessageCompletedEventHandler(ByVal sender As Object, ByVal e As BuildCustomerMessageCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class BuildCustomerMessageCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub decryptCompletedEventHandler(ByVal sender As Object, ByVal e As decryptCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class decryptCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub CreatePasswordHashCompletedEventHandler(ByVal sender As Object, ByVal e As CreatePasswordHashCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class CreatePasswordHashCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")>  _
    Public Delegate Sub RetrieveCompanyNumberForPanCompletedEventHandler(ByVal sender As Object, ByVal e As RetrieveCompanyNumberForPanCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class RetrieveCompanyNumberForPanCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Integer
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Integer)
            End Get
        End Property
    End Class
End Namespace
